{"version":3,"file":"static/chunks/778-ff4e748dab482d22.js","mappings":"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","sources":["webpack://_N_E/./src/components/command-bar-spacer-item.tsx","webpack://_N_E/./src/components/scrcpy/recorder.ts","webpack://_N_E/./src/components/scrcpy/audio-decode-stream.ts","webpack://_N_E/./src/components/scrcpy/fetch-server.ts","webpack://_N_E/./src/components/scrcpy/input.ts","webpack://_N_E/./src/components/scrcpy/settings.tsx","webpack://_N_E/./src/components/scrcpy/state.tsx","webpack://_N_E/./src/components/scrcpy/command-bar.tsx","webpack://_N_E/./src/components/scrcpy/navigation-bar.tsx","webpack://_N_E/./src/components/scrcpy/video-container.tsx","webpack://_N_E/./src/components/scrcpy/index.ts","webpack://_N_E/./src/hooks/add-event-listener.ts","webpack://_N_E/./src/hooks/layout-effect.ts","webpack://_N_E/./src/hooks/stable-callback.ts","webpack://_N_E/./src/hooks/local-storage.ts","webpack://_N_E/./src/hooks/index.ts","webpack://_N_E/./src/pages/scrcpy.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport function CommandBarSpacerItem() {\n    const [container, setContainer] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        if (!container) {\n            return;\n        }\n\n        const parent = container.parentElement!;\n        const originalFlexGrow = parent.style.flexGrow;\n        parent.style.flexGrow = \"1\";\n        return () => {\n            parent.style.flexGrow = originalFlexGrow;\n        };\n    }, [container]);\n\n    return <div ref={setContainer} />;\n}\n","// cspell: ignore MPEGH\n// cspell: ignore rbsp\n// cspell: ignore Nalus\n\nimport {\n    H265NaluRaw,\n    ScrcpyAudioCodec,\n    ScrcpyMediaStreamDataPacket,\n    ScrcpyMediaStreamPacket,\n    ScrcpyVideoCodecId,\n    ScrcpyVideoStreamMetadata,\n    annexBSplitNalu,\n    h264SearchConfiguration,\n    h265ParseSequenceParameterSet,\n    h265ParseVideoParameterSet,\n    h265SearchConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport { action, makeAutoObservable, reaction } from \"mobx\";\nimport { ArrayBufferTarget, Muxer as WebMMuxer } from \"webm-muxer\";\nimport { saveFile } from \"../../utils\";\n\n// https://ffmpeg.org/doxygen/0.11/avc_8c-source.html#l00106\nfunction h264ConfigurationToAvcDecoderConfigurationRecord(\n    sequenceParameterSet: Uint8Array,\n    pictureParameterSet: Uint8Array\n) {\n    const buffer = new Uint8Array(\n        11 + sequenceParameterSet.byteLength + pictureParameterSet.byteLength\n    );\n    buffer[0] = 1;\n    buffer[1] = sequenceParameterSet[1];\n    buffer[2] = sequenceParameterSet[2];\n    buffer[3] = sequenceParameterSet[3];\n    buffer[4] = 0xff;\n    buffer[5] = 0xe1;\n    buffer[6] = sequenceParameterSet.byteLength >> 8;\n    buffer[7] = sequenceParameterSet.byteLength & 0xff;\n    buffer.set(sequenceParameterSet, 8);\n    buffer[8 + sequenceParameterSet.byteLength] = 1;\n    buffer[9 + sequenceParameterSet.byteLength] =\n        pictureParameterSet.byteLength >> 8;\n    buffer[10 + sequenceParameterSet.byteLength] =\n        pictureParameterSet.byteLength & 0xff;\n    buffer.set(pictureParameterSet, 11 + sequenceParameterSet.byteLength);\n    return buffer;\n}\n\nfunction h265ConfigurationToHevcDecoderConfigurationRecord(\n    videoParameterSet: H265NaluRaw,\n    sequenceParameterSet: H265NaluRaw,\n    pictureParameterSet: H265NaluRaw\n) {\n    const {\n        profileTierLevel: {\n            generalProfileTier: {\n                profile_space: general_profile_space,\n                tier_flag: general_tier_flag,\n                profile_idc: general_profile_idc,\n                profileCompatibilitySet: generalProfileCompatibilitySet,\n                constraintSet: generalConstraintSet,\n            },\n            general_level_idc,\n        },\n        vps_max_layers_minus1,\n        vps_temporal_id_nesting_flag,\n    } = h265ParseVideoParameterSet(videoParameterSet.rbsp);\n\n    const {\n        chroma_format_idc,\n        bit_depth_luma_minus8,\n        bit_depth_chroma_minus8,\n        vuiParameters: { min_spatial_segmentation_idc = 0 } = {},\n    } = h265ParseSequenceParameterSet(sequenceParameterSet.rbsp);\n\n    const buffer = new Uint8Array(\n        23 +\n            5 * 3 +\n            videoParameterSet.data.length +\n            sequenceParameterSet.data.length +\n            pictureParameterSet.data.length\n    );\n\n    /* unsigned int(8) configurationVersion = 1; */\n    buffer[0] = 1;\n\n    /*\n     * unsigned int(2) general_profile_space;\n     * unsigned int(1) general_tier_flag;\n     * unsigned int(5) general_profile_idc;\n     */\n    buffer[1] =\n        (general_profile_space << 6) |\n        (Number(general_tier_flag) << 5) |\n        general_profile_idc;\n\n    /* unsigned int(32) general_profile_compatibility_flags; */\n    buffer[2] = generalProfileCompatibilitySet[0];\n    buffer[3] = generalProfileCompatibilitySet[1];\n    buffer[4] = generalProfileCompatibilitySet[2];\n    buffer[5] = generalProfileCompatibilitySet[3];\n\n    /* unsigned int(48) general_constraint_indicator_flags; */\n    buffer[6] = generalConstraintSet[0];\n    buffer[7] = generalConstraintSet[1];\n    buffer[8] = generalConstraintSet[2];\n    buffer[9] = generalConstraintSet[3];\n    buffer[10] = generalConstraintSet[4];\n    buffer[11] = generalConstraintSet[5];\n\n    /* unsigned int(8) general_level_idc; */\n    buffer[12] = general_level_idc;\n\n    /*\n     * bit(4) reserved = '1111'b;\n     * unsigned int(12) min_spatial_segmentation_idc;\n     */\n    buffer[13] = 0xf0 | (min_spatial_segmentation_idc >> 8);\n    buffer[14] = min_spatial_segmentation_idc;\n\n    /*\n     * bit(6) reserved = '111111'b;\n     * unsigned int(2) parallelismType;\n     */\n    buffer[15] = 0xfc;\n\n    /*\n     * bit(6) reserved = '111111'b;\n     * unsigned int(2) chromaFormat;\n     */\n    buffer[16] = 0xfc | chroma_format_idc;\n\n    /*\n     * bit(5) reserved = '11111'b;\n     * unsigned int(3) bitDepthLumaMinus8;\n     */\n    buffer[17] = 0xf8 | bit_depth_luma_minus8;\n\n    /*\n     * bit(5) reserved = '11111'b;\n     * unsigned int(3) bitDepthChromaMinus8;\n     */\n    buffer[18] = 0xf8 | bit_depth_chroma_minus8;\n\n    /* bit(16) avgFrameRate; */\n    buffer[19] = 0;\n    buffer[20] = 0;\n\n    /*\n     * bit(2) constantFrameRate;\n     * bit(3) numTemporalLayers;\n     * bit(1) temporalIdNested;\n     * unsigned int(2) lengthSizeMinusOne;\n     */\n    buffer[21] =\n        ((vps_max_layers_minus1 + 1) << 3) |\n        (Number(vps_temporal_id_nesting_flag) << 2) |\n        3;\n\n    /* unsigned int(8) numOfArrays; */\n    buffer[22] = 3;\n\n    let i = 23;\n\n    for (const nalu of [\n        videoParameterSet,\n        sequenceParameterSet,\n        pictureParameterSet,\n    ]) {\n        /*\n         * bit(1) array_completeness;\n         * unsigned int(1) reserved = 0;\n         * unsigned int(6) NAL_unit_type;\n         */\n        buffer[i] = nalu.nal_unit_type;\n        i += 1;\n\n        /* unsigned int(16) numNalus; */\n        buffer[i] = 0;\n        i += 1;\n        buffer[i] = 1;\n        i += 1;\n\n        /* unsigned int(16) nalUnitLength; */\n        buffer[i] = nalu.data.length >> 8;\n        i += 1;\n        buffer[i] = nalu.data.length;\n        i += 1;\n\n        buffer.set(nalu.data, i);\n        i += nalu.data.length;\n    }\n\n    return buffer;\n}\n\nfunction h264StreamToAvcSample(buffer: Uint8Array) {\n    const nalUnits: Uint8Array[] = [];\n    let totalLength = 0;\n\n    for (const unit of annexBSplitNalu(buffer)) {\n        nalUnits.push(unit);\n        totalLength += unit.byteLength + 4;\n    }\n\n    const sample = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const nalu of nalUnits) {\n        sample[offset] = nalu.byteLength >> 24;\n        sample[offset + 1] = nalu.byteLength >> 16;\n        sample[offset + 2] = nalu.byteLength >> 8;\n        sample[offset + 3] = nalu.byteLength & 0xff;\n        sample.set(nalu, offset + 4);\n        offset += 4 + nalu.byteLength;\n    }\n    return sample;\n}\n\n// https://github.com/FFmpeg/FFmpeg/blob/adb5f7b41faf354a3e0bf722f44aeb230aefa310/libavformat/matroska.c\nconst MatroskaVideoCodecNameMap: Record<ScrcpyVideoCodecId, string> = {\n    [ScrcpyVideoCodecId.H264]: \"V_MPEG4/ISO/AVC\",\n    [ScrcpyVideoCodecId.H265]: \"V_MPEGH/ISO/HEVC\",\n    [ScrcpyVideoCodecId.AV1]: \"V_AV1\",\n};\n\nconst MatroskaAudioCodecNameMap: Record<string, string> = {\n    [ScrcpyAudioCodec.RAW.mimeType]: \"A_PCM/INT/LIT\",\n    [ScrcpyAudioCodec.AAC.mimeType]: \"A_AAC\",\n    [ScrcpyAudioCodec.OPUS.mimeType]: \"A_OPUS\",\n};\n\nexport class MatroskaMuxingRecorder {\n    public running = false;\n\n    public videoMetadata: ScrcpyVideoStreamMetadata | undefined;\n    public audioCodec: ScrcpyAudioCodec | undefined;\n\n    private muxer: WebMMuxer<ArrayBufferTarget> | undefined;\n    private videoCodecDescription: Uint8Array | undefined;\n    private configurationWritten = false;\n    private _firstTimestamp = -1;\n    private _packetsFromLastKeyframe: {\n        type: \"video\" | \"audio\";\n        packet: ScrcpyMediaStreamDataPacket;\n    }[] = [];\n\n    private addVideoChunk(packet: ScrcpyMediaStreamDataPacket) {\n        if (this._firstTimestamp === -1) {\n            this._firstTimestamp = Number(packet.pts!);\n        }\n\n        const sample = h264StreamToAvcSample(packet.data);\n        this.muxer!.addVideoChunkRaw(\n            sample,\n            packet.keyframe ? \"key\" : \"delta\",\n            Number(packet.pts) - this._firstTimestamp,\n            this.configurationWritten\n                ? undefined\n                : {\n                      decoderConfig: {\n                          // Not used\n                          codec: \"\",\n                          description: this.videoCodecDescription,\n                      },\n                  }\n        );\n        this.configurationWritten = true;\n    }\n\n    public addVideoPacket(packet: ScrcpyMediaStreamPacket) {\n        if (!this.videoMetadata) {\n            throw new Error(\"videoMetadata must be set\");\n        }\n\n        try {\n            if (packet.type === \"configuration\") {\n                switch (this.videoMetadata.codec) {\n                    case ScrcpyVideoCodecId.H264: {\n                        const { sequenceParameterSet, pictureParameterSet } =\n                            h264SearchConfiguration(packet.data);\n                        this.videoCodecDescription =\n                            h264ConfigurationToAvcDecoderConfigurationRecord(\n                                sequenceParameterSet,\n                                pictureParameterSet\n                            );\n                        this.configurationWritten = false;\n                        break;\n                    }\n                    case ScrcpyVideoCodecId.H265: {\n                        const {\n                            videoParameterSet,\n                            sequenceParameterSet,\n                            pictureParameterSet,\n                        } = h265SearchConfiguration(packet.data);\n                        this.videoCodecDescription =\n                            h265ConfigurationToHevcDecoderConfigurationRecord(\n                                videoParameterSet,\n                                sequenceParameterSet,\n                                pictureParameterSet\n                            );\n                        this.configurationWritten = false;\n                        break;\n                    }\n                }\n                return;\n            }\n\n            // To ensure the first frame is a keyframe\n            // save the last keyframe and the following frames\n            if (packet.keyframe === true) {\n                this._packetsFromLastKeyframe.length = 0;\n            }\n            this._packetsFromLastKeyframe.push({ type: \"video\", packet });\n\n            if (!this.muxer) {\n                return;\n            }\n\n            this.addVideoChunk(packet);\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private addAudioChunk(chunk: ScrcpyMediaStreamDataPacket) {\n        if (this._firstTimestamp === -1) {\n            return;\n        }\n\n        const timestamp = Number(chunk.pts) - this._firstTimestamp;\n        if (timestamp < 0) {\n            return;\n        }\n\n        if (!this.muxer) {\n            return;\n        }\n\n        this.muxer.addAudioChunkRaw(chunk.data, \"key\", timestamp);\n    }\n\n    public addAudioPacket(packet: ScrcpyMediaStreamDataPacket) {\n        this._packetsFromLastKeyframe.push({ type: \"audio\", packet });\n        this.addAudioChunk(packet);\n    }\n\n    public start() {\n        if (!this.videoMetadata) {\n            throw new Error(\"videoMetadata must be set\");\n        }\n\n        this.running = true;\n\n        const options: ConstructorParameters<typeof WebMMuxer>[0] = {\n            target: new ArrayBufferTarget(),\n            type: \"matroska\",\n            firstTimestampBehavior: \"permissive\",\n            video: {\n                codec: MatroskaVideoCodecNameMap[this.videoMetadata.codec!],\n                width: this.videoMetadata.width ?? 0,\n                height: this.videoMetadata.height ?? 0,\n            },\n        };\n\n        if (this.audioCodec) {\n            options.audio = {\n                codec: MatroskaAudioCodecNameMap[this.audioCodec.mimeType!],\n                sampleRate: 48000,\n                numberOfChannels: 2,\n                bitDepth:\n                    this.audioCodec === ScrcpyAudioCodec.RAW ? 16 : undefined,\n            };\n        }\n\n        this.muxer = new WebMMuxer(options as any);\n\n        if (this._packetsFromLastKeyframe.length > 0) {\n            for (const { type, packet } of this._packetsFromLastKeyframe) {\n                if (type === \"video\") {\n                    this.addVideoChunk(packet);\n                } else {\n                    this.addAudioChunk(packet);\n                }\n            }\n        }\n    }\n\n    public stop() {\n        if (!this.muxer) {\n            return;\n        }\n\n        this.muxer.finalize()!;\n        const buffer = this.muxer.target.buffer;\n        const now = new Date();\n        const stream = saveFile(\n            // prettier-ignore\n            `Recording ${\n                now.getFullYear()\n            }-${\n                (now.getMonth() + 1).toString().padStart(2, '0')\n            }-${\n                now.getDate().toString().padStart(2, '0')\n            } ${\n                now.getHours().toString().padStart(2, '0')\n            }-${\n                now.getMinutes().toString().padStart(2, '0')\n            }-${\n                now.getSeconds().toString().padStart(2, '0')\n            }.mkv`\n        );\n        const writer = stream.getWriter();\n        writer.write(new Uint8Array(buffer));\n        writer.close();\n\n        this.muxer = undefined;\n        this.configurationWritten = false;\n        this.running = false;\n    }\n}\n\nexport const RECORD_STATE = makeAutoObservable({\n    recorder: new MatroskaMuxingRecorder(),\n    recording: false,\n    intervalId: -1,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n});\n\nreaction(\n    () => RECORD_STATE.recording,\n    (recording) => {\n        if (recording) {\n            RECORD_STATE.intervalId = globalThis.setInterval(\n                action(() => {\n                    RECORD_STATE.seconds += 1;\n                    if (RECORD_STATE.seconds >= 60) {\n                        RECORD_STATE.seconds = 0;\n                        RECORD_STATE.minutes += 1;\n                    }\n                    if (RECORD_STATE.minutes >= 60) {\n                        RECORD_STATE.minutes = 0;\n                        RECORD_STATE.hours += 1;\n                    }\n                }),\n                1000\n            ) as unknown as number;\n        } else {\n            globalThis.clearInterval(RECORD_STATE.intervalId);\n            RECORD_STATE.intervalId = -1;\n            RECORD_STATE.hours = 0;\n            RECORD_STATE.minutes = 0;\n            RECORD_STATE.seconds = 0;\n        }\n    }\n);\n","import { ScrcpyMediaStreamPacket } from \"@yume-chan/scrcpy\";\nimport { TransformStream } from \"@yume-chan/stream-extra\";\n\nexport class AacDecodeStream extends TransformStream<\n    ScrcpyMediaStreamPacket,\n    Float32Array[]\n> {\n    constructor(config: AudioDecoderConfig) {\n        let decoder: AudioDecoder;\n        super({\n            start(controller) {\n                decoder = new AudioDecoder({\n                    error(error) {\n                        console.log(\"audio decoder error: \", error);\n                        controller.error(error);\n                    },\n                    output(output) {\n                        controller.enqueue(\n                            Array.from({ length: 2 }, (_, i) => {\n                                const options: AudioDataCopyToOptions = {\n                                    // AAC decodes to \"f32-planar\",\n                                    // converting to another format may cause audio glitches on Chrome.\n                                    format: \"f32-planar\",\n                                    planeIndex: i,\n                                };\n                                const buffer = new Float32Array(\n                                    output.allocationSize(options) /\n                                        Float32Array.BYTES_PER_ELEMENT\n                                );\n                                output.copyTo(buffer, options);\n                                return buffer;\n                            })\n                        );\n                    },\n                });\n            },\n            transform(chunk) {\n                switch (chunk.type) {\n                    case \"configuration\":\n                        // https://www.w3.org/TR/webcodecs-aac-codec-registration/#audiodecoderconfig-description\n                        // Raw AAC stream needs `description` to be set.\n                        decoder.configure({\n                            ...config,\n                            description: chunk.data,\n                        });\n                        break;\n                    case \"data\":\n                        decoder.decode(\n                            new EncodedAudioChunk({\n                                data: chunk.data,\n                                type: \"key\",\n                                timestamp: 0,\n                            })\n                        );\n                }\n            },\n            async flush() {\n                await decoder!.flush();\n            },\n        });\n    }\n}\n\nexport class OpusDecodeStream extends TransformStream<\n    ScrcpyMediaStreamPacket,\n    Float32Array\n> {\n    constructor(config: AudioDecoderConfig) {\n        let decoder: AudioDecoder;\n        super({\n            start(controller) {\n                decoder = new AudioDecoder({\n                    error(error) {\n                        console.log(\"audio decoder error: \", error);\n                        controller.error(error);\n                    },\n                    output(output) {\n                        // Opus decodes to \"f32\",\n                        // converting to another format may cause audio glitches on Chrome.\n                        const options: AudioDataCopyToOptions = {\n                            format: \"f32\",\n                            planeIndex: 0,\n                        };\n                        const buffer = new Float32Array(\n                            output.allocationSize(options) /\n                                Float32Array.BYTES_PER_ELEMENT\n                        );\n                        output.copyTo(buffer, options);\n                        controller.enqueue(buffer);\n                    },\n                });\n                decoder.configure(config);\n            },\n            transform(chunk) {\n                switch (chunk.type) {\n                    case \"configuration\":\n                        // configuration data is a opus-in-ogg identification header,\n                        // but stream data is raw opus,\n                        // so it has no use here.\n                        break;\n                    case \"data\":\n                        if (chunk.data.length === 0) {\n                            break;\n                        }\n                        decoder.decode(\n                            new EncodedAudioChunk({\n                                type: \"key\",\n                                timestamp: 0,\n                                data: chunk.data,\n                            })\n                        );\n                }\n            },\n            async flush() {\n                await decoder!.flush();\n            },\n        });\n    }\n}\n","import { EventEmitter } from \"@yume-chan/event\";\nimport { BIN } from \"@yume-chan/fetch-scrcpy-server\";\n\nclass FetchWithProgress {\n    public readonly promise: Promise<Uint8Array>;\n\n    private _downloaded = 0;\n    public get downloaded() {\n        return this._downloaded;\n    }\n\n    private _total = 0;\n    public get total() {\n        return this._total;\n    }\n\n    private progressEvent = new EventEmitter<\n        [download: number, total: number]\n    >();\n    public get onProgress() {\n        return this.progressEvent.event;\n    }\n\n    public constructor(url: string | URL) {\n        this.promise = this.fetch(url);\n    }\n\n    private async fetch(url: string | URL) {\n        const response = await globalThis.fetch(url);\n        this._total = Number.parseInt(\n            response.headers.get(\"Content-Length\") ?? \"0\",\n            10\n        );\n        this.progressEvent.fire([this._downloaded, this._total]);\n\n        const reader = response.body!.getReader();\n        const chunks: Uint8Array[] = [];\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                break;\n            }\n            chunks.push(result.value);\n            this._downloaded += result.value.byteLength;\n            this.progressEvent.fire([this._downloaded, this._total]);\n        }\n\n        this._total = chunks.reduce(\n            (result, item) => result + item.byteLength,\n            0\n        );\n        const result = new Uint8Array(this._total);\n        let position = 0;\n        for (const chunk of chunks) {\n            result.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return result;\n    }\n}\n\nlet cachedValue: FetchWithProgress | undefined;\nexport function fetchServer(\n    onProgress?: (e: [downloaded: number, total: number]) => void\n) {\n    if (!cachedValue) {\n        cachedValue = new FetchWithProgress(BIN);\n        cachedValue.promise.catch(() => {\n            cachedValue = undefined;\n        });\n    }\n\n    if (onProgress) {\n        cachedValue.onProgress(onProgress);\n        onProgress([cachedValue.downloaded, cachedValue.total]);\n    }\n\n    return cachedValue.promise;\n}\n","import { AdbScrcpyClient } from \"@yume-chan/adb-scrcpy\";\nimport { AoaHidDevice, HidKeyCode, HidKeyboard } from \"@yume-chan/aoa\";\nimport { Disposable } from \"@yume-chan/event\";\nimport {\n    AndroidKeyCode,\n    AndroidKeyEventAction,\n    AndroidKeyEventMeta,\n} from \"@yume-chan/scrcpy\";\n\nexport interface KeyboardInjector extends Disposable {\n    down(key: string): Promise<void>;\n    up(key: string): Promise<void>;\n    reset(): Promise<void>;\n}\n\nexport class ScrcpyKeyboardInjector implements KeyboardInjector {\n    private readonly client: AdbScrcpyClient;\n\n    private _controlLeft = false;\n    private _controlRight = false;\n    private _shiftLeft = false;\n    private _shiftRight = false;\n    private _altLeft = false;\n    private _altRight = false;\n    private _metaLeft = false;\n    private _metaRight = false;\n\n    private _capsLock = false;\n    private _numLock = true;\n\n    private _keys: Set<AndroidKeyCode> = new Set();\n\n    public constructor(client: AdbScrcpyClient) {\n        this.client = client;\n    }\n\n    private setModifier(keyCode: AndroidKeyCode, value: boolean) {\n        switch (keyCode) {\n            case AndroidKeyCode.ControlLeft:\n                this._controlLeft = value;\n                break;\n            case AndroidKeyCode.ControlRight:\n                this._controlRight = value;\n                break;\n            case AndroidKeyCode.ShiftLeft:\n                this._shiftLeft = value;\n                break;\n            case AndroidKeyCode.ShiftRight:\n                this._shiftRight = value;\n                break;\n            case AndroidKeyCode.AltLeft:\n                this._altLeft = value;\n                break;\n            case AndroidKeyCode.AltRight:\n                this._altRight = value;\n                break;\n            case AndroidKeyCode.MetaLeft:\n                this._metaLeft = value;\n                break;\n            case AndroidKeyCode.MetaRight:\n                this._metaRight = value;\n                break;\n            case AndroidKeyCode.CapsLock:\n                if (value) {\n                    this._capsLock = !this._capsLock;\n                }\n                break;\n            case AndroidKeyCode.NumLock:\n                if (value) {\n                    this._numLock = !this._numLock;\n                }\n                break;\n        }\n    }\n\n    private getMetaState(): AndroidKeyEventMeta {\n        let metaState = 0;\n        if (this._altLeft) {\n            metaState |=\n                AndroidKeyEventMeta.AltOn | AndroidKeyEventMeta.AltLeftOn;\n        }\n        if (this._altRight) {\n            metaState |=\n                AndroidKeyEventMeta.AltOn | AndroidKeyEventMeta.AltRightOn;\n        }\n        if (this._shiftLeft) {\n            metaState |=\n                AndroidKeyEventMeta.ShiftOn | AndroidKeyEventMeta.ShiftLeftOn;\n        }\n        if (this._shiftRight) {\n            metaState |=\n                AndroidKeyEventMeta.ShiftOn | AndroidKeyEventMeta.ShiftRightOn;\n        }\n        if (this._controlLeft) {\n            metaState |=\n                AndroidKeyEventMeta.CtrlOn | AndroidKeyEventMeta.CtrlLeftOn;\n        }\n        if (this._controlRight) {\n            metaState |=\n                AndroidKeyEventMeta.CtrlOn | AndroidKeyEventMeta.CtrlRightOn;\n        }\n        if (this._metaLeft) {\n            metaState |=\n                AndroidKeyEventMeta.MetaOn | AndroidKeyEventMeta.MetaLeftOn;\n        }\n        if (this._metaRight) {\n            metaState |=\n                AndroidKeyEventMeta.MetaOn | AndroidKeyEventMeta.MetaRightOn;\n        }\n        if (this._capsLock) {\n            metaState |= AndroidKeyEventMeta.CapsLockOn;\n        }\n        if (this._numLock) {\n            metaState |= AndroidKeyEventMeta.NumLockOn;\n        }\n        return metaState;\n    }\n\n    public async down(key: string): Promise<void> {\n        const keyCode = AndroidKeyCode[key as keyof typeof AndroidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.setModifier(keyCode, true);\n        this._keys.add(keyCode);\n        await this.client.controlMessageWriter?.injectKeyCode({\n            action: AndroidKeyEventAction.Down,\n            keyCode,\n            metaState: this.getMetaState(),\n            repeat: 0,\n        });\n    }\n\n    public async up(key: string): Promise<void> {\n        const keyCode = AndroidKeyCode[key as keyof typeof AndroidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.setModifier(keyCode, false);\n        this._keys.delete(keyCode);\n        await this.client.controlMessageWriter?.injectKeyCode({\n            action: AndroidKeyEventAction.Up,\n            keyCode,\n            metaState: this.getMetaState(),\n            repeat: 0,\n        });\n    }\n\n    public async reset(): Promise<void> {\n        this._controlLeft = false;\n        this._controlRight = false;\n        this._shiftLeft = false;\n        this._shiftRight = false;\n        this._altLeft = false;\n        this._altRight = false;\n        this._metaLeft = false;\n        this._metaRight = false;\n        for (const key of this._keys) {\n            this.up(AndroidKeyCode[key]);\n        }\n        this._keys.clear();\n    }\n\n    public dispose(): void {\n        // do nothing\n    }\n}\n\nexport class AoaKeyboardInjector implements KeyboardInjector {\n    public static async register(\n        device: USBDevice\n    ): Promise<AoaKeyboardInjector> {\n        const keyboard = await AoaHidDevice.register(\n            device,\n            0,\n            HidKeyboard.DESCRIPTOR\n        );\n        return new AoaKeyboardInjector(keyboard);\n    }\n\n    private readonly aoaKeyboard: AoaHidDevice;\n    private readonly hidKeyboard = new HidKeyboard();\n\n    public constructor(aoaKeyboard: AoaHidDevice) {\n        this.aoaKeyboard = aoaKeyboard;\n    }\n\n    public async down(key: string): Promise<void> {\n        const keyCode = HidKeyCode[key as keyof typeof HidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.hidKeyboard.down(keyCode);\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async up(key: string): Promise<void> {\n        const keyCode = HidKeyCode[key as keyof typeof HidKeyCode];\n        if (!keyCode) {\n            return;\n        }\n\n        this.hidKeyboard.up(keyCode);\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async reset(): Promise<void> {\n        this.hidKeyboard.reset();\n        await this.aoaKeyboard.sendInputReport(\n            this.hidKeyboard.serializeInputReport()\n        );\n    }\n\n    public async dispose(): Promise<void> {\n        await this.aoaKeyboard.unregister();\n    }\n}\n","import {\n    Dropdown,\n    IDropdownOption,\n    Icon,\n    IconButton,\n    Position,\n    SpinButton,\n    Stack,\n    TextField,\n    Toggle,\n    TooltipHost,\n} from \"@fluentui/react\";\nimport { makeStyles } from \"@griffel/react\";\nimport { AdbSyncError } from \"@yume-chan/adb\";\nimport { AdbScrcpyClient, AdbScrcpyOptionsLatest } from \"@yume-chan/adb-scrcpy\";\nimport { VERSION } from \"@yume-chan/fetch-scrcpy-server\";\nimport {\n    CodecOptions,\n    DEFAULT_SERVER_PATH,\n    ScrcpyDisplay,\n    ScrcpyEncoder,\n    ScrcpyLogLevel,\n    ScrcpyOptionsInitLatest,\n    ScrcpyOptionsLatest,\n    ScrcpyVideoOrientation,\n} from \"@yume-chan/scrcpy\";\nimport {\n    ScrcpyVideoDecoderConstructor,\n    TinyH264Decoder,\n} from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport { ConcatStringStream, DecodeUtf8Stream } from \"@yume-chan/stream-extra\";\nimport {\n    autorun,\n    computed,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { GLOBAL_STATE } from \"../../state\";\nimport { Icons } from \"../../utils\";\nimport { STATE } from \"./state\";\n\nexport type Settings = ScrcpyOptionsInitLatest;\n\nexport interface ClientSettings {\n    turnScreenOff?: boolean;\n    decoder?: string;\n    ignoreDecoderCodecArgs?: boolean;\n}\n\nexport type SettingKeys = keyof (Settings & ClientSettings);\n\nexport interface SettingDefinitionBase {\n    group: \"settings\" | \"clientSettings\";\n    key: SettingKeys;\n    type: string;\n    label: string;\n    labelExtra?: JSX.Element;\n    description?: string;\n}\n\nexport interface TextSettingDefinition extends SettingDefinitionBase {\n    type: \"text\";\n    placeholder?: string;\n}\n\nexport interface DropdownSettingDefinition extends SettingDefinitionBase {\n    type: \"dropdown\";\n    placeholder?: string;\n    options: IDropdownOption[];\n}\n\nexport interface ToggleSettingDefinition extends SettingDefinitionBase {\n    type: \"toggle\";\n    disabled?: boolean;\n}\n\nexport interface NumberSettingDefinition extends SettingDefinitionBase {\n    type: \"number\";\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport type SettingDefinition =\n    | TextSettingDefinition\n    | DropdownSettingDefinition\n    | ToggleSettingDefinition\n    | NumberSettingDefinition;\n\ninterface SettingItemProps {\n    definition: SettingDefinition;\n    value: any;\n    onChange: (definition: SettingDefinition, value: any) => void;\n}\n\nconst useClasses = makeStyles({\n    labelRight: {\n        marginLeft: \"4px\",\n    },\n    item: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n    },\n});\n\nexport const SettingItem = observer(function SettingItem({\n    definition,\n    value,\n    onChange,\n}: SettingItemProps) {\n    const classes = useClasses();\n\n    let label: JSX.Element = (\n        <Stack horizontal verticalAlign=\"center\">\n            <span>{definition.label}</span>\n            {!!definition.description && (\n                <TooltipHost content={definition.description}>\n                    <Icon\n                        className={classes.labelRight}\n                        iconName={Icons.Info}\n                    />\n                </TooltipHost>\n            )}\n            {definition.labelExtra}\n        </Stack>\n    );\n\n    switch (definition.type) {\n        case \"text\":\n            return (\n                <TextField\n                    className={classes.item}\n                    label={label as any}\n                    placeholder={definition.placeholder}\n                    value={value}\n                    onChange={(e, value) => onChange(definition, value)}\n                />\n            );\n        case \"dropdown\":\n            return (\n                <Dropdown\n                    className={classes.item}\n                    label={label as any}\n                    options={definition.options}\n                    placeholder={definition.placeholder}\n                    selectedKey={value}\n                    onChange={(e, option) => onChange(definition, option!.key)}\n                />\n            );\n        case \"toggle\":\n            return (\n                <Toggle\n                    label={label}\n                    checked={value}\n                    disabled={definition.disabled}\n                    onChange={(e, checked) => onChange(definition, checked)}\n                />\n            );\n        case \"number\":\n            return (\n                <SpinButton\n                    className={classes.item}\n                    label={definition.label}\n                    labelPosition={Position.top}\n                    min={definition.min}\n                    max={definition.max}\n                    step={definition.step}\n                    value={value.toString()}\n                    onChange={(e, value) =>\n                        onChange(definition, Number.parseInt(value!, 10))\n                    }\n                />\n            );\n    }\n});\n\nexport interface DecoderDefinition {\n    key: string;\n    name: string;\n    Constructor: ScrcpyVideoDecoderConstructor;\n}\n\nconst DEFAULT_SETTINGS = {\n    maxSize: 1080,\n    videoBitRate: 4_000_000,\n    videoCodec: \"h264\",\n    lockVideoOrientation: ScrcpyVideoOrientation.Unlocked,\n    displayId: 0,\n    crop: \"\",\n    powerOn: true,\n    audio: true,\n    audioCodec: \"aac\",\n} as Settings;\n\nexport const SETTING_STATE = makeAutoObservable(\n    {\n        displays: [] as ScrcpyDisplay[],\n        encoders: [] as ScrcpyEncoder[],\n        decoders: [\n            {\n                key: \"tinyh264\",\n                name: \"TinyH264 (Software)\",\n                Constructor: TinyH264Decoder,\n            },\n        ] as DecoderDefinition[],\n\n        settings: DEFAULT_SETTINGS,\n\n        clientSettings: {} as ClientSettings,\n    },\n    {\n        decoders: observable.shallow,\n        settings: observable.deep,\n        clientSettings: observable.deep,\n    }\n);\n\nexport const SCRCPY_SETTINGS_FILENAME = \"/data/local/tmp/.tango.json\";\n\nautorun(() => {\n    if (GLOBAL_STATE.adb) {\n        (async () => {\n            const sync = await GLOBAL_STATE.adb!.sync();\n            try {\n                const content = await sync\n                    .read(SCRCPY_SETTINGS_FILENAME)\n                    .pipeThrough(new DecodeUtf8Stream())\n                    .pipeThrough(new ConcatStringStream());\n                const settings = JSON.parse(content);\n                settings.settings.videoCodecOptions = new CodecOptions(\n                    settings.settings.videoCodecOptions,\n                );\n                settings.settings.audioCodecOptions = new CodecOptions(\n                    settings.settings.audioCodecOptions,\n                );\n                runInAction(() => {\n                    SETTING_STATE.settings = {\n                        ...DEFAULT_SETTINGS,\n                        ...settings.settings,\n                    };\n                    SETTING_STATE.clientSettings = settings.clientSettings;\n                });\n            } catch (e) {\n                if (!(e instanceof AdbSyncError)) {\n                    throw e;\n                }\n            } finally {\n                await sync.dispose();\n            }\n        })();\n\n        runInAction(() => {\n            SETTING_STATE.encoders = [];\n            SETTING_STATE.displays = [];\n            SETTING_STATE.settings.displayId = undefined;\n        });\n    }\n});\n\nautorun(() => {\n    SETTING_STATE.clientSettings.decoder = SETTING_STATE.decoders[0].key;\n});\n\nexport const SETTING_DEFINITIONS = computed(() => {\n    const result: SettingDefinition[] = [];\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"powerOn\",\n            type: \"toggle\",\n            label: \"Wake device up on start\",\n        },\n        {\n            group: \"clientSettings\",\n            key: \"turnScreenOff\",\n            type: \"toggle\",\n            label: \"Turn screen off during mirroring\",\n        },\n        {\n            group: \"settings\",\n            key: \"stayAwake\",\n            type: \"toggle\",\n            label: \"Stay awake during mirroring (if plugged in)\",\n        },\n        {\n            group: \"settings\",\n            key: \"powerOffOnClose\",\n            type: \"toggle\",\n            label: \"Turn device off on stop\",\n        }\n    );\n\n    result.push({\n        group: \"settings\",\n        key: \"displayId\",\n        type: \"dropdown\",\n        label: \"Display\",\n        placeholder: \"Press refresh to update available displays\",\n        labelExtra: (\n            <IconButton\n                iconProps={{ iconName: Icons.ArrowClockwise }}\n                disabled={!GLOBAL_STATE.adb}\n                text=\"Refresh\"\n                onClick={async () => {\n                    try {\n                        await STATE.pushServer();\n\n                        const displays = await AdbScrcpyClient.getDisplays(\n                            GLOBAL_STATE.adb!,\n                            DEFAULT_SERVER_PATH,\n                            VERSION,\n                            new AdbScrcpyOptionsLatest(\n                                new ScrcpyOptionsLatest({\n                                    logLevel: ScrcpyLogLevel.Debug,\n                                })\n                            )\n                        );\n\n                        runInAction(() => {\n                            SETTING_STATE.displays = displays;\n                            if (\n                                !SETTING_STATE.settings.displayId ||\n                                !SETTING_STATE.displays.some(\n                                    (x) =>\n                                        x.id ===\n                                        SETTING_STATE.settings.displayId\n                                )\n                            ) {\n                                SETTING_STATE.settings.displayId =\n                                    SETTING_STATE.displays[0]?.id;\n                            }\n                        });\n                    } catch (e: any) {\n                        GLOBAL_STATE.showErrorDialog(e);\n                    }\n                }}\n            />\n        ),\n        options: SETTING_STATE.displays.map((item) => ({\n            key: item.id,\n            text: `${item.id}${item.resolution ? ` (${item.resolution})` : \"\"}`,\n        })),\n    });\n\n    result.push({\n        group: \"settings\",\n        key: \"crop\",\n        type: \"text\",\n        label: \"Crop\",\n        placeholder: \"W:H:X:Y\",\n    });\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"maxSize\",\n            type: \"number\",\n            label: \"Max Resolution (longer side, 0 = unlimited)\",\n            min: 0,\n            max: 2560,\n            step: 50,\n        },\n        {\n            group: \"settings\",\n            key: \"videoBitRate\",\n            type: \"number\",\n            label: \"Max Video Bitrate (bps)\",\n            min: 100,\n            max: 100_000_000,\n            step: 100,\n        },\n        {\n            group: \"settings\",\n            key: \"videoCodec\",\n            type: \"dropdown\",\n            label: \"Video Codec\",\n            options: [\n                {\n                    key: \"h264\",\n                    text: \"H.264\",\n                },\n                {\n                    key: \"h265\",\n                    text: \"H.265\",\n                },\n            ],\n        },\n        {\n            group: \"settings\",\n            key: \"videoEncoder\",\n            type: \"dropdown\",\n            label: \"Video Encoder\",\n            placeholder:\n                SETTING_STATE.encoders.length === 0\n                    ? \"Press refresh button to update encoder list\"\n                    : \"(default)\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GLOBAL_STATE.adb}\n                    text=\"Refresh\"\n                    onClick={async () => {\n                        try {\n                            await STATE.pushServer();\n\n                            const encoders = await AdbScrcpyClient.getEncoders(\n                                GLOBAL_STATE.adb!,\n                                DEFAULT_SERVER_PATH,\n                                VERSION,\n                                new AdbScrcpyOptionsLatest(\n                                    new ScrcpyOptionsLatest({\n                                        logLevel: ScrcpyLogLevel.Debug,\n                                    })\n                                )\n                            );\n\n                            runInAction(() => {\n                                SETTING_STATE.encoders = encoders;\n                            });\n                        } catch (e: any) {\n                            GLOBAL_STATE.showErrorDialog(e);\n                        }\n                    }}\n                />\n            ),\n            options: SETTING_STATE.encoders\n                .filter(\n                    (item) =>\n                        item.type === \"video\" &&\n                        (!item.codec ||\n                            item.codec === SETTING_STATE.settings.videoCodec!)\n                )\n                .map((item) => ({\n                    key: item.name,\n                    text: item.name,\n                })),\n        }\n    );\n\n    result.push({\n        group: \"settings\",\n        key: \"lockVideoOrientation\",\n        type: \"dropdown\",\n        label: \"Lock Video Orientation\",\n        options: [\n            {\n                key: ScrcpyVideoOrientation.Unlocked,\n                text: \"Unlocked\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Initial,\n                text: \"Current\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Portrait,\n                text: \"Portrait\",\n            },\n            {\n                key: ScrcpyVideoOrientation.Landscape,\n                text: \"Landscape\",\n            },\n            {\n                key: ScrcpyVideoOrientation.PortraitFlipped,\n                text: \"Portrait (Flipped)\",\n            },\n            {\n                key: ScrcpyVideoOrientation.LandscapeFlipped,\n                text: \"Landscape (Flipped)\",\n            },\n        ],\n    });\n\n    if (SETTING_STATE.decoders.length > 1) {\n        result.push({\n            group: \"clientSettings\",\n            key: \"decoder\",\n            type: \"dropdown\",\n            label: \"Video Decoder\",\n            options: SETTING_STATE.decoders.map((item) => ({\n                key: item.key,\n                text: item.name,\n                data: item,\n            })),\n        });\n    }\n\n    result.push({\n        group: \"clientSettings\",\n        key: \"ignoreDecoderCodecArgs\",\n        type: \"toggle\",\n        label: `Ignore video decoder's codec options`,\n        description: `Some decoders don't support all H.264 profile/levels, so they request the device to encode at their highest-supported codec. However, some super old devices may not support that codec so their encoders will fail to start. Use this option to let device choose the codec to be used.`,\n    });\n\n    result.push(\n        {\n            group: \"settings\",\n            key: \"audio\",\n            type: \"toggle\",\n            label: \"Forward Audio (Requires Android 11)\",\n        },\n        {\n            group: \"settings\",\n            key: \"audioCodec\",\n            type: \"dropdown\",\n            label: \"Audio Codec\",\n            options: [\n                {\n                    key: \"raw\",\n                    text: \"Raw\",\n                },\n                {\n                    key: \"aac\",\n                    text: \"AAC\",\n                },\n                {\n                    key: \"opus\",\n                    text: \"Opus\",\n                },\n            ],\n        },\n        {\n            group: \"settings\",\n            key: \"audioEncoder\",\n            type: \"dropdown\",\n            placeholder:\n                SETTING_STATE.encoders.length === 0\n                    ? \"Press refresh button to update encoder list\"\n                    : \"(default)\",\n            label: \"Audio Encoder\",\n            labelExtra: (\n                <IconButton\n                    iconProps={{ iconName: Icons.ArrowClockwise }}\n                    disabled={!GLOBAL_STATE.adb}\n                    text=\"Refresh\"\n                    onClick={async () => {\n                        try {\n                            await STATE.pushServer();\n\n                            const encoders = await AdbScrcpyClient.getEncoders(\n                                GLOBAL_STATE.adb!,\n                                DEFAULT_SERVER_PATH,\n                                VERSION,\n                                new AdbScrcpyOptionsLatest(\n                                    new ScrcpyOptionsLatest({\n                                        logLevel: ScrcpyLogLevel.Debug,\n                                    })\n                                )\n                            );\n\n                            runInAction(() => {\n                                SETTING_STATE.encoders = encoders;\n                            });\n                        } catch (e: any) {\n                            GLOBAL_STATE.showErrorDialog(e);\n                        }\n                    }}\n                />\n            ),\n            options: SETTING_STATE.encoders\n                .filter(\n                    (x) =>\n                        x.type === \"audio\" &&\n                        x.codec === SETTING_STATE.settings.audioCodec\n                )\n                .map((item) => ({\n                    key: item.name,\n                    text: item.name,\n                })),\n        }\n    );\n\n    return result;\n});\n\nautorun(() => {\n    if (SETTING_STATE.encoders.length === 0) {\n        SETTING_STATE.settings.videoEncoder = \"\";\n        SETTING_STATE.settings.audioEncoder = \"\";\n        return;\n    }\n\n    const encodersForCurrentVideoCodec = SETTING_STATE.encoders.filter(\n        (item) =>\n            item.type === \"video\" &&\n            item.codec === SETTING_STATE.settings.videoCodec\n    );\n    if (\n        SETTING_STATE.settings.videoEncoder &&\n        encodersForCurrentVideoCodec.every(\n            (item) => item.name !== SETTING_STATE.settings.videoEncoder\n        )\n    ) {\n        SETTING_STATE.settings.videoEncoder = \"\";\n    }\n\n    const encodersForCurrentAudioCodec = SETTING_STATE.encoders.filter(\n        (item) =>\n            item.type === \"audio\" &&\n            item.codec === SETTING_STATE.settings.audioCodec\n    );\n    if (\n        SETTING_STATE.settings.audioEncoder &&\n        encodersForCurrentAudioCodec.every(\n            (item) => item.name !== SETTING_STATE.settings.audioEncoder\n        )\n    ) {\n        SETTING_STATE.settings.audioEncoder = \"\";\n    }\n});\n","import { ADB_SYNC_MAX_PACKET_SIZE, encodeUtf8 } from \"@yume-chan/adb\";\nimport { AdbDaemonWebUsbDevice } from \"@yume-chan/adb-daemon-webusb\";\nimport { AdbScrcpyClient, AdbScrcpyOptionsLatest } from \"@yume-chan/adb-scrcpy\";\nimport { VERSION } from \"@yume-chan/fetch-scrcpy-server\";\nimport {\n  Float32PcmPlayer,\n  Float32PlanerPcmPlayer,\n  Int16PcmPlayer,\n  PcmPlayer,\n} from \"@yume-chan/pcm-player\";\nimport {\n  AndroidScreenPowerMode,\n  CodecOptions,\n  DEFAULT_SERVER_PATH,\n  ScrcpyAudioCodec,\n  ScrcpyDeviceMessageType,\n  ScrcpyHoverHelper,\n  ScrcpyInstanceId,\n  ScrcpyLogLevel,\n  ScrcpyMediaStreamPacket,\n  ScrcpyOptionsLatest,\n  ScrcpyVideoCodecId,\n  clamp,\n  h264ParseConfiguration,\n  h265ParseConfiguration,\n} from \"@yume-chan/scrcpy\";\nimport { ScrcpyVideoDecoder } from \"@yume-chan/scrcpy-decoder-tinyh264\";\nimport {\n  Consumable,\n  DistributionStream,\n  InspectStream,\n  ReadableStream,\n  WritableStream,\n} from \"@yume-chan/stream-extra\";\nimport { action, autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { GLOBAL_STATE } from \"../../state\";\nimport { ProgressStream } from \"../../utils\";\nimport { AacDecodeStream, OpusDecodeStream } from \"./audio-decode-stream\";\nimport { fetchServer } from \"./fetch-server\";\nimport {\n  AoaKeyboardInjector,\n  KeyboardInjector,\n  ScrcpyKeyboardInjector,\n} from \"./input\";\nimport { MatroskaMuxingRecorder, RECORD_STATE } from \"./recorder\";\nimport { SCRCPY_SETTINGS_FILENAME, SETTING_STATE } from \"./settings\";\n\nexport class ScrcpyPageState {\n    running = false;\n\n    fullScreenContainer: HTMLDivElement | null = null;\n    rendererContainer: HTMLDivElement | null = null;\n\n    isFullScreen = false;\n\n    logVisible = false;\n    log: string[] = [];\n    demoModeVisible = false;\n    navigationBarVisible = true;\n\n    width = 0;\n    height = 0;\n    rotation = 0;\n\n    get rotatedWidth() {\n        return STATE.rotation & 1 ? STATE.height : STATE.width;\n    }\n    get rotatedHeight() {\n        return STATE.rotation & 1 ? STATE.width : STATE.height;\n    }\n\n    client: AdbScrcpyClient | undefined = undefined;\n    hoverHelper: ScrcpyHoverHelper | undefined = undefined;\n    keyboard: KeyboardInjector | undefined = undefined;\n    audioPlayer: PcmPlayer<unknown> | undefined = undefined;\n\n    async pushServer() {\n        const serverBuffer = await fetchServer();\n        await AdbScrcpyClient.pushServer(\n            GLOBAL_STATE.adb!,\n            new ReadableStream<Consumable<Uint8Array>>({\n                start(controller) {\n                    controller.enqueue(new Consumable(serverBuffer));\n                    controller.close();\n                },\n            }),\n        );\n    }\n\n    decoder: ScrcpyVideoDecoder | undefined = undefined;\n    fpsCounterIntervalId: any = undefined;\n    fps = \"0\";\n\n    connecting = false;\n    serverTotalSize = 0;\n    serverDownloadedSize = 0;\n    debouncedServerDownloadedSize = 0;\n    serverDownloadSpeed = 0;\n    serverUploadedSize = 0;\n    debouncedServerUploadedSize = 0;\n    serverUploadSpeed = 0;\n\n    constructor() {\n        makeAutoObservable(this, {\n            start: false,\n            stop: action.bound,\n            dispose: action.bound,\n            setFullScreenContainer: action.bound,\n            setRendererContainer: action.bound,\n            clientPositionToDevicePosition: false,\n        });\n\n        autorun(() => {\n            if (!GLOBAL_STATE.adb) {\n                this.dispose();\n            }\n        });\n\n        if (typeof document === \"object\") {\n            document.addEventListener(\"fullscreenchange\", () => {\n                if (!document.fullscreenElement) {\n                    runInAction(() => {\n                        this.isFullScreen = false;\n                    });\n                }\n            });\n        }\n\n        autorun(() => {\n            if (this.rendererContainer && this.decoder) {\n                while (this.rendererContainer.firstChild) {\n                    this.rendererContainer.firstChild.remove();\n                }\n                this.rendererContainer.appendChild(this.decoder.renderer);\n            }\n        });\n    }\n\n    start = async () => {\n        if (!GLOBAL_STATE.adb) {\n            return;\n        }\n\n        try {\n            if (!SETTING_STATE.clientSettings.decoder) {\n                throw new Error(\"No available decoder\");\n            }\n\n            runInAction(() => {\n                this.serverTotalSize = 0;\n                this.serverDownloadedSize = 0;\n                this.debouncedServerDownloadedSize = 0;\n                this.serverUploadedSize = 0;\n                this.debouncedServerUploadedSize = 0;\n                this.connecting = true;\n            });\n\n            let intervalId = setInterval(\n                action(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                }),\n                1000,\n            );\n\n            let serverBuffer: Uint8Array;\n            try {\n                serverBuffer = await fetchServer(\n                    action(([downloaded, total]) => {\n                        this.serverDownloadedSize = downloaded;\n                        this.serverTotalSize = total;\n                    }),\n                );\n                runInAction(() => {\n                    this.serverDownloadSpeed =\n                        this.serverDownloadedSize -\n                        this.debouncedServerDownloadedSize;\n                    this.debouncedServerDownloadedSize =\n                        this.serverDownloadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            intervalId = setInterval(\n                action(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                }),\n                1000,\n            );\n\n            try {\n                await AdbScrcpyClient.pushServer(\n                    GLOBAL_STATE.adb!,\n                    new ReadableStream<Consumable<Uint8Array>>({\n                        start(controller) {\n                            controller.enqueue(new Consumable(serverBuffer));\n                            controller.close();\n                        },\n                    })\n                        // In fact `pushServer` will pipe the stream through a DistributionStream,\n                        // but without this pipeThrough, the progress will not be updated.\n                        .pipeThrough(\n                            new DistributionStream(ADB_SYNC_MAX_PACKET_SIZE),\n                        )\n                        .pipeThrough(\n                            new ProgressStream(\n                                action((progress) => {\n                                    this.serverUploadedSize = progress;\n                                }),\n                            ),\n                        ),\n                );\n\n                runInAction(() => {\n                    this.serverUploadSpeed =\n                        this.serverUploadedSize -\n                        this.debouncedServerUploadedSize;\n                    this.debouncedServerUploadedSize = this.serverUploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n\n            const decoderDefinition =\n                SETTING_STATE.decoders.find(\n                    (x) => x.key === SETTING_STATE.clientSettings.decoder,\n                ) ?? SETTING_STATE.decoders[0];\n\n            const videoCodecOptions = new CodecOptions();\n            if (!SETTING_STATE.clientSettings.ignoreDecoderCodecArgs) {\n                const capability =\n                    decoderDefinition.Constructor.capabilities[\n                        SETTING_STATE.settings.videoCodec!\n                    ];\n                if (capability) {\n                    videoCodecOptions.value.profile = capability.maxProfile;\n                    videoCodecOptions.value.level = capability.maxLevel;\n                }\n            }\n\n            // Disabled due to https://github.com/Genymobile/scrcpy/issues/2841\n            // Less recording delay\n            // codecOptions.value.iFrameInterval = 1;\n            // Less latency\n            // codecOptions.value.intraRefreshPeriod = 10000;\n\n            const options = new AdbScrcpyOptionsLatest(\n                new ScrcpyOptionsLatest({\n                    ...SETTING_STATE.settings,\n                    logLevel: ScrcpyLogLevel.Debug,\n                    scid: ScrcpyInstanceId.random(),\n                    sendDeviceMeta: false,\n                    sendDummyByte: false,\n                    videoCodecOptions,\n                }),\n            );\n\n            runInAction(() => {\n                this.log = [];\n                this.log.push(`[client] Server version: ${VERSION}`);\n                this.log.push(\n                    `[client] Server arguments: ${options\n                        .serialize()\n                        .join(\" \")}`,\n                );\n            });\n\n            const client = await AdbScrcpyClient.start(\n                GLOBAL_STATE.adb!,\n                DEFAULT_SERVER_PATH,\n                VERSION,\n                options,\n            );\n\n            client.stdout.pipeTo(\n                new WritableStream<string>({\n                    write: action((line) => {\n                        this.log.push(line);\n                    }),\n                }),\n            );\n\n            const sync = await GLOBAL_STATE.adb!.sync();\n            try {\n                await sync.write({\n                    filename: SCRCPY_SETTINGS_FILENAME,\n                    file: new ReadableStream<Consumable<Uint8Array>>({\n                        start(controller) {\n                            controller.enqueue(\n                                new Consumable(\n                                    encodeUtf8(\n                                        JSON.stringify(\n                                            {\n                                                settings:\n                                                    SETTING_STATE.settings,\n                                                clientSettings:\n                                                    SETTING_STATE.clientSettings,\n                                            },\n                                            (_, value) => {\n                                                if (\n                                                    value instanceof\n                                                    CodecOptions\n                                                ) {\n                                                    return value.value;\n                                                }\n                                                return value;\n                                            },\n                                        ),\n                                    ),\n                                ),\n                            );\n                            controller.close();\n                        },\n                    }),\n                });\n            } finally {\n                sync.dispose();\n            }\n\n            RECORD_STATE.recorder = new MatroskaMuxingRecorder();\n\n            client.videoStream!.then(({ stream, metadata }) => {\n                runInAction(() => {\n                    RECORD_STATE.recorder.videoMetadata = metadata;\n                });\n\n                const decoder = new decoderDefinition.Constructor(\n                    metadata.codec,\n                );\n\n                runInAction(() => {\n                    this.decoder = decoder;\n\n                    let lastFrameRendered = 0;\n                    let lastFrameSkipped = 0;\n                    this.fpsCounterIntervalId = setInterval(\n                        action(() => {\n                            const deltaRendered =\n                                decoder.frameRendered - lastFrameRendered;\n                            const deltaSkipped =\n                                decoder.frameSkipped - lastFrameSkipped;\n                            // prettier-ignore\n                            this.fps = `${\n                            deltaRendered\n                        }${\n                            deltaSkipped ? `+${deltaSkipped} skipped` : \"\"\n                        }`;\n                            lastFrameRendered = decoder.frameRendered;\n                            lastFrameSkipped = decoder.frameSkipped;\n                        }),\n                        1000,\n                    );\n                });\n\n                let lastKeyframe = 0n;\n                const handler = new InspectStream<ScrcpyMediaStreamPacket>(\n                    (packet) => {\n                        RECORD_STATE.recorder.addVideoPacket(packet);\n\n                        if (packet.type === \"configuration\") {\n                            let croppedWidth: number;\n                            let croppedHeight: number;\n                            switch (metadata.codec) {\n                                case ScrcpyVideoCodecId.H264:\n                                    ({ croppedWidth, croppedHeight } =\n                                        h264ParseConfiguration(packet.data));\n                                    break;\n                                case ScrcpyVideoCodecId.H265:\n                                    ({ croppedWidth, croppedHeight } =\n                                        h265ParseConfiguration(packet.data));\n                                    break;\n                                default:\n                                    throw new Error(\"Codec not supported\");\n                            }\n\n                            runInAction(() => {\n                                this.log.push(\n                                    `[client] Video size changed: ${croppedWidth}x${croppedHeight}`,\n                                );\n                                this.width = croppedWidth;\n                                this.height = croppedHeight;\n                            });\n                        } else if (\n                            packet.keyframe &&\n                            packet.pts !== undefined\n                        ) {\n                            if (lastKeyframe) {\n                                const interval =\n                                    (Number(packet.pts - lastKeyframe) / 1000) |\n                                    0;\n                                runInAction(() => {\n                                    this.log.push(\n                                        `[client] Keyframe interval: ${interval}ms`,\n                                    );\n                                });\n                            }\n                            lastKeyframe = packet.pts!;\n                        }\n                    },\n                );\n\n                stream.pipeThrough(handler).pipeTo(decoder.writable);\n            });\n\n            client.audioStream?.then(async (metadata) => {\n                switch (metadata.type) {\n                    case \"disabled\":\n                        runInAction(() =>\n                            this.log.push(\n                                `[client] Demuxer audio: stream explicitly disabled by the device`,\n                            ),\n                        );\n                        return;\n                    case \"errored\":\n                        runInAction(() =>\n                            this.log.push(\n                                `[client] Demuxer audio: stream configuration error on the device`,\n                            ),\n                        );\n                        return;\n                    case \"success\":\n                        // Code is after this `switch`\n                        break;\n                    default:\n                        throw new Error(\n                            `Unexpected audio metadata type ${\n                                metadata[\"type\"] as unknown as string\n                            }`,\n                        );\n                }\n\n                const [recordStream, playbackStream] = metadata.stream.tee();\n                switch (metadata.codec) {\n                    case ScrcpyAudioCodec.RAW: {\n                        const audioPlayer = new Int16PcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream.pipeTo(\n                            new WritableStream({\n                                write: (chunk) => {\n                                    audioPlayer.feed(\n                                        new Int16Array(\n                                            chunk.data.buffer,\n                                            chunk.data.byteOffset,\n                                            chunk.data.byteLength /\n                                                Int16Array.BYTES_PER_ELEMENT,\n                                        ),\n                                    );\n                                },\n                            }),\n                        );\n\n                        await this.audioPlayer.start();\n                        break;\n                    }\n                    case ScrcpyAudioCodec.OPUS: {\n                        const audioPlayer = new Float32PcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream\n                            .pipeThrough(\n                                new OpusDecodeStream({\n                                    codec: metadata.codec.webCodecId,\n                                    numberOfChannels: 2,\n                                    sampleRate: 48000,\n                                }),\n                            )\n                            .pipeTo(\n                                new WritableStream({\n                                    write: (chunk) => {\n                                        audioPlayer.feed(chunk);\n                                    },\n                                }),\n                            );\n                        await audioPlayer.start();\n                        break;\n                    }\n                    case ScrcpyAudioCodec.AAC: {\n                        const audioPlayer = new Float32PlanerPcmPlayer(48000);\n                        this.audioPlayer = audioPlayer;\n\n                        playbackStream\n                            .pipeThrough(\n                                new AacDecodeStream({\n                                    codec: metadata.codec.webCodecId,\n                                    numberOfChannels: 2,\n                                    sampleRate: 48000,\n                                }),\n                            )\n                            .pipeTo(\n                                new WritableStream({\n                                    write: (chunk) => {\n                                        audioPlayer.feed(chunk);\n                                    },\n                                }),\n                            );\n                        await audioPlayer.start();\n                        break;\n                    }\n                    default:\n                        throw new Error(\n                            `Unsupported audio codec ${metadata.codec.optionValue}`,\n                        );\n                }\n\n                runInAction(() => {\n                    RECORD_STATE.recorder.audioCodec = metadata.codec;\n                });\n\n                recordStream.pipeTo(\n                    new WritableStream({\n                        write: (packet) => {\n                            if (packet.type === \"data\") {\n                                RECORD_STATE.recorder.addAudioPacket(packet);\n                            }\n                        },\n                    }),\n                );\n            });\n\n            client.exit.then(this.dispose);\n\n            client.deviceMessageStream!.pipeTo(\n                new WritableStream({\n                    write(message) {\n                        switch (message.type) {\n                            case ScrcpyDeviceMessageType.Clipboard:\n                                globalThis.navigator.clipboard.writeText(\n                                    message.content,\n                                );\n                                break;\n                        }\n                    },\n                }),\n            );\n\n            if (SETTING_STATE.clientSettings.turnScreenOff) {\n                await client.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Off,\n                );\n            }\n\n            runInAction(() => {\n                this.client = client;\n                this.hoverHelper = new ScrcpyHoverHelper();\n                this.running = true;\n            });\n\n            const device = GLOBAL_STATE.device!;\n            if (device instanceof AdbDaemonWebUsbDevice) {\n                this.keyboard = await AoaKeyboardInjector.register(device.raw);\n            } else {\n                this.keyboard = new ScrcpyKeyboardInjector(client);\n            }\n        } catch (e: any) {\n            GLOBAL_STATE.showErrorDialog(e);\n        } finally {\n            runInAction(() => {\n                this.connecting = false;\n            });\n        }\n    };\n\n    async stop() {\n        // Request to close client first\n        await this.client?.close();\n        this.dispose();\n    }\n\n    dispose() {\n        // Otherwise some packets may still arrive at decoder\n        this.decoder?.dispose();\n        this.decoder = undefined;\n\n        if (RECORD_STATE.recording) {\n            RECORD_STATE.recorder.stop();\n            RECORD_STATE.recording = false;\n        }\n\n        this.keyboard?.dispose();\n        this.keyboard = undefined;\n\n        this.audioPlayer?.stop();\n        this.audioPlayer = undefined;\n\n        this.fps = \"0\";\n        clearTimeout(this.fpsCounterIntervalId);\n\n        if (this.isFullScreen) {\n            document.exitFullscreen();\n            this.isFullScreen = false;\n        }\n\n        this.client = undefined;\n        this.running = false;\n    }\n\n    setFullScreenContainer(element: HTMLDivElement | null) {\n        this.fullScreenContainer = element;\n    }\n\n    setRendererContainer(element: HTMLDivElement | null) {\n        this.rendererContainer = element;\n    }\n\n    clientPositionToDevicePosition(clientX: number, clientY: number) {\n        const viewRect = this.rendererContainer!.getBoundingClientRect();\n        let pointerViewX = clamp((clientX - viewRect.x) / viewRect.width, 0, 1);\n        let pointerViewY = clamp(\n            (clientY - viewRect.y) / viewRect.height,\n            0,\n            1,\n        );\n\n        if (this.rotation & 1) {\n            [pointerViewX, pointerViewY] = [pointerViewY, pointerViewX];\n        }\n        switch (this.rotation) {\n            case 1:\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 2:\n                pointerViewX = 1 - pointerViewX;\n                pointerViewY = 1 - pointerViewY;\n                break;\n            case 3:\n                pointerViewX = 1 - pointerViewX;\n                break;\n        }\n\n        return {\n            x: pointerViewX * this.width,\n            y: pointerViewY * this.height,\n        };\n    }\n}\n\nexport const STATE = new ScrcpyPageState();\n","import {\n    CommandBar,\n    ContextualMenuItemType,\n    ICommandBarItemProps,\n} from \"@fluentui/react\";\nimport {\n    AndroidKeyCode,\n    AndroidKeyEventAction,\n    AndroidScreenPowerMode,\n} from \"@yume-chan/scrcpy\";\nimport { action, computed } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { Icons } from \"../../utils\";\nimport { CommandBarSpacerItem } from \"../command-bar-spacer-item\";\nimport { RECORD_STATE } from \"./recorder\";\nimport { STATE } from \"./state\";\n\nconst ITEMS = computed(() => {\n    const result: ICommandBarItemProps[] = [];\n\n    result.push({\n        key: \"stop\",\n        iconProps: { iconName: Icons.Stop },\n        text: \"Stop\",\n        onClick: STATE.stop as VoidFunction,\n    });\n\n    result.push(\n        RECORD_STATE.recording\n            ? {\n                  key: \"Record\",\n                  iconProps: {\n                      iconName: Icons.Record,\n                      style: { color: \"red\" },\n                  },\n                  // prettier-ignore\n                  text: `${\n                      RECORD_STATE.hours ? `${RECORD_STATE.hours}:` : \"\"\n                  }${\n                      RECORD_STATE.minutes.toString().padStart(2, \"0\")\n                  }:${\n                      RECORD_STATE.seconds.toString().padStart(2, \"0\")\n                  }`,\n                  onClick: action(() => {\n                      STATE.fullScreenContainer!.focus();\n\n                      RECORD_STATE.recorder.stop();\n                      RECORD_STATE.recording = false;\n                  }),\n              }\n            : {\n                  key: \"Record\",\n                  disabled: !STATE.running,\n                  iconProps: { iconName: Icons.Record },\n                  text: \"Record\",\n                  onClick: action(() => {\n                      STATE.fullScreenContainer!.focus();\n\n                      RECORD_STATE.recorder.start();\n                      RECORD_STATE.recording = true;\n                  }),\n              },\n    );\n\n    // result.push({\n    //     key: \"fullscreen\",\n    //     disabled: !STATE.running,\n    //     iconProps: { iconName: Icons.FullScreenMaximize },\n    //     iconOnly: true,\n    //     text: \"Fullscreen\",\n    //     onClick: action(() => {\n    //         STATE.fullScreenContainer!.focus();\n\n    //         STATE.fullScreenContainer!.requestFullscreen();\n    //         STATE.isFullScreen = true;\n    //     }),\n    // });\n\n    result.push(\n        {\n            key: \"volumeUp\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Speaker2 },\n            iconOnly: true,\n            text: \"Volume Up\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                // TODO: Auto repeat when holding\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeUp,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeUp,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        },\n        {\n            key: \"volumeDown\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Speaker1 },\n            iconOnly: true,\n            text: \"Volume Down\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeDown,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeDown,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        },\n        {\n            key: \"volumeMute\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.SpeakerOff },\n            iconOnly: true,\n            text: \"Toggle Mute\",\n            onClick: (async () => {\n                STATE.fullScreenContainer!.focus();\n\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Down,\n                    keyCode: AndroidKeyCode.VolumeMute,\n                    repeat: 0,\n                    metaState: 0,\n                });\n                await STATE.client?.controlMessageWriter!.injectKeyCode({\n                    action: AndroidKeyEventAction.Up,\n                    keyCode: AndroidKeyCode.VolumeMute,\n                    repeat: 0,\n                    metaState: 0,\n                });\n            }) as () => void,\n        },\n    );\n\n    // result.push(\n    //     {\n    //         key: \"rotateDevice\",\n    //         disabled: !STATE.running,\n    //         iconProps: { iconName: Icons.Orientation },\n    //         iconOnly: true,\n    //         text: \"Rotate Device\",\n    //         onClick: () => {\n    //             STATE.fullScreenContainer!.focus();\n\n    //             STATE.client!.controlMessageWriter!.rotateDevice();\n    //         },\n    //     },\n    //     {\n    //         key: \"rotateVideoLeft\",\n    //         disabled: !STATE.running,\n    //         iconProps: { iconName: Icons.RotateLeft },\n    //         iconOnly: true,\n    //         text: \"Rotate Video Left\",\n    //         onClick: action(() => {\n    //             STATE.fullScreenContainer!.focus();\n\n    //             STATE.rotation -= 1;\n    //             if (STATE.rotation < 0) {\n    //                 STATE.rotation = 3;\n    //             }\n    //         }),\n    //     },\n    //     {\n    //         key: \"rotateVideoRight\",\n    //         disabled: !STATE.running,\n    //         iconProps: { iconName: Icons.RotateRight },\n    //         iconOnly: true,\n    //         text: \"Rotate Video Right\",\n    //         onClick: action(() => {\n    //             STATE.fullScreenContainer!.focus();\n\n    //             STATE.rotation = (STATE.rotation + 1) & 3;\n    //         }),\n    //     }\n    // );\n\n    result.push(\n        {\n            key: \"turnScreenOff\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.Lightbulb },\n            iconOnly: true,\n            text: \"Turn Screen Off\",\n            onClick: () => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.client!.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Off,\n                );\n            },\n        },\n        {\n            key: \"turnScreenOn\",\n            disabled: !STATE.running,\n            iconProps: { iconName: Icons.LightbulbFilament },\n            iconOnly: true,\n            text: \"Turn Screen On\",\n            onClick: () => {\n                STATE.fullScreenContainer!.focus();\n\n                STATE.client!.controlMessageWriter!.setScreenPowerMode(\n                    AndroidScreenPowerMode.Normal,\n                );\n            },\n        },\n    );\n\n    if (STATE.running) {\n        result.push({\n            key: \"fps\",\n            text: `FPS: ${STATE.fps}`,\n            disabled: true,\n        });\n    }\n\n    result.push(\n        {\n            // HACK: make CommandBar overflow on far items\n            // https://github.com/microsoft/fluentui/issues/11842\n            key: \"spacer\",\n            onRender: () => <CommandBarSpacerItem />,\n        },\n        {\n            // HACK: add a separator in CommandBar overflow menu\n            // https://github.com/microsoft/fluentui/issues/10035\n            key: \"separator\",\n            disabled: true,\n            itemType: ContextualMenuItemType.Divider,\n        },\n    );\n\n    result.push(\n        {\n            key: \"NavigationBar\",\n            iconProps: { iconName: Icons.PanelBottom },\n            canCheck: true,\n            checked: STATE.navigationBarVisible,\n            text: \"Navigation Bar\",\n            iconOnly: true,\n            onClick: action(() => {\n                STATE.navigationBarVisible = !STATE.navigationBarVisible;\n            }),\n        },\n        // {\n        //     key: \"Log\",\n        //     iconProps: { iconName: Icons.TextGrammarError },\n        //     canCheck: true,\n        //     checked: STATE.logVisible,\n        //     text: \"Log\",\n        //     iconOnly: true,\n        //     onClick: action(() => {\n        //         STATE.logVisible = !STATE.logVisible;\n        //     }),\n        // },\n        // {\n        //     key: \"DemoMode\",\n        //     iconProps: { iconName: Icons.Wand },\n        //     canCheck: true,\n        //     checked: STATE.demoModeVisible,\n        //     text: \"Demo Mode\",\n        //     iconOnly: true,\n        //     onClick: action(() => {\n        //         STATE.demoModeVisible = !STATE.demoModeVisible;\n        //     }),\n        // }\n    );\n\n    return result;\n});\n\nexport const ScrcpyCommandBar = observer(function ScrcpyCommandBar() {\n    return <CommandBar items={ITEMS.get()} />;\n});\n","import { IconButton, Stack } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses } from \"@griffel/react\";\nimport { AndroidKeyCode, AndroidKeyEventAction } from \"@yume-chan/scrcpy\";\nimport { observer } from \"mobx-react-lite\";\nimport { CSSProperties, PointerEvent, ReactNode } from \"react\";\nimport { Icons } from \"../../utils\";\nimport { STATE } from \"./state\";\n\nconst useClasses = makeStyles({\n    container: {\n        height: \"40px\",\n        backgroundColor: \"#999\",\n    },\n    bar: {\n        width: \"100%\",\n        maxWidth: \"300px\",\n    },\n    icon: {\n        color: \"white\",\n    },\n    back: {\n        transform: \"rotate(180deg)\",\n    },\n});\n\nfunction handlePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return false;\n    }\n\n    if (e.button !== 0) {\n        return false;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.currentTarget.setPointerCapture(e.pointerId);\n    e.preventDefault();\n    e.stopPropagation();\n\n    return true;\n}\n\nfunction handlePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return false;\n    }\n\n    if (e.button !== 0) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction handleBackPointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.backOrScreenOn(\n        AndroidKeyEventAction.Down\n    );\n}\n\nfunction handleBackPointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.backOrScreenOn(\n        AndroidKeyEventAction.Up\n    );\n}\n\nfunction handleHomePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Down,\n        keyCode: AndroidKeyCode.AndroidHome,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleHomePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Up,\n        keyCode: AndroidKeyCode.AndroidHome,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleAppSwitchPointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerDown(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Down,\n        keyCode: AndroidKeyCode.AndroidAppSwitch,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nfunction handleAppSwitchPointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!handlePointerUp(e)) {\n        return;\n    }\n\n    STATE.client!.controlMessageWriter!.injectKeyCode({\n        action: AndroidKeyEventAction.Up,\n        keyCode: AndroidKeyCode.AndroidAppSwitch,\n        repeat: 0,\n        metaState: 0,\n    });\n}\n\nexport const NavigationBar = observer(function NavigationBar({\n    className,\n    style,\n    children,\n}: {\n    className: string;\n    style: CSSProperties;\n    children: ReactNode;\n}) {\n    const classes = useClasses();\n\n    if (!STATE.navigationBarVisible) {\n        return (\n            <div className={className} style={style}>\n                {children}\n            </div>\n        );\n    }\n\n    return (\n        <Stack\n            className={mergeClasses(classes.container, className)}\n            verticalFill\n            horizontalAlign=\"center\"\n            style={style}\n        >\n            {children}\n\n            <Stack\n                className={classes.bar}\n                verticalFill\n                horizontal\n                horizontalAlign=\"space-evenly\"\n                verticalAlign=\"center\"\n            >\n                <IconButton\n                    className={mergeClasses(classes.back, classes.icon)}\n                    iconProps={{ iconName: Icons.Play }}\n                    onPointerDown={handleBackPointerDown}\n                    onPointerUp={handleBackPointerUp}\n                />\n                <IconButton\n                    className={classes.icon}\n                    iconProps={{ iconName: Icons.Circle }}\n                    onPointerDown={handleHomePointerDown}\n                    onPointerUp={handleHomePointerUp}\n                />\n                <IconButton\n                    className={classes.icon}\n                    iconProps={{ iconName: Icons.Stop }}\n                    onPointerDown={handleAppSwitchPointerDown}\n                    onPointerUp={handleAppSwitchPointerUp}\n                />\n            </Stack>\n        </Stack>\n    );\n});\n","import { makeStyles } from \"@griffel/react\";\nimport {\n    AndroidMotionEventAction,\n    AndroidMotionEventButton,\n    ScrcpyPointerId,\n} from \"@yume-chan/scrcpy\";\nimport { MouseEvent, PointerEvent, useEffect, useState } from \"react\";\nimport { STATE } from \"./state\";\n\nconst useClasses = makeStyles({\n    video: {\n        transformOrigin: \"center center\",\n        touchAction: \"none\",\n    },\n});\n\nfunction handleWheel(e: WheelEvent) {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { x, y } = STATE.clientPositionToDevicePosition(e.clientX, e.clientY);\n    STATE.client!.controlMessageWriter!.injectScroll({\n        screenWidth: STATE.client!.screenWidth!,\n        screenHeight: STATE.client!.screenHeight!,\n        pointerX: x,\n        pointerY: y,\n        scrollX: -e.deltaX / 100,\n        scrollY: -e.deltaY / 100,\n        buttons: 0,\n    });\n}\n\nconst MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON = [\n    AndroidMotionEventButton.Primary,\n    AndroidMotionEventButton.Tertiary,\n    AndroidMotionEventButton.Secondary,\n    AndroidMotionEventButton.Back,\n    AndroidMotionEventButton.Forward,\n];\n\nfunction injectTouch(\n    action: AndroidMotionEventAction,\n    e: PointerEvent<HTMLDivElement>,\n) {\n    if (!STATE.client) {\n        return;\n    }\n\n    const { pointerType } = e;\n    let pointerId: bigint;\n    if (pointerType === \"mouse\") {\n        // Android 13 has bug with mouse injection\n        // https://github.com/Genymobile/scrcpy/issues/3708\n        pointerId = ScrcpyPointerId.Finger;\n    } else {\n        pointerId = BigInt(e.pointerId);\n    }\n\n    const { x, y } = STATE.clientPositionToDevicePosition(e.clientX, e.clientY);\n\n    const messages = STATE.hoverHelper!.process({\n        action,\n        pointerId,\n        screenWidth: STATE.client.screenWidth!,\n        screenHeight: STATE.client.screenHeight!,\n        pointerX: x,\n        pointerY: y,\n        pressure: e.pressure,\n        actionButton: MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON[e.button],\n        // `MouseEvent.buttons` has the same order as Android `MotionEvent`\n        buttons: e.buttons,\n    });\n    for (const message of messages) {\n        STATE.client.controlMessageWriter!.injectTouch(message);\n    }\n}\n\nfunction handlePointerDown(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.fullScreenContainer!.focus();\n    e.preventDefault();\n    e.stopPropagation();\n\n    e.currentTarget.setPointerCapture(e.pointerId);\n    injectTouch(AndroidMotionEventAction.Down, e);\n}\n\nfunction handlePointerMove(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    injectTouch(\n        e.buttons === 0\n            ? AndroidMotionEventAction.HoverMove\n            : AndroidMotionEventAction.Move,\n        e,\n    );\n}\n\nfunction handlePointerUp(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    injectTouch(AndroidMotionEventAction.Up, e);\n}\n\nfunction handlePointerLeave(e: PointerEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    // Because pointer capture on pointer down, this event only happens for hovering mouse and pen.\n    // Release the injected pointer, otherwise it will stuck at the last position.\n    injectTouch(AndroidMotionEventAction.HoverExit, e);\n    injectTouch(AndroidMotionEventAction.Up, e);\n}\n\nfunction handleContextMenu(e: MouseEvent<HTMLDivElement>) {\n    e.preventDefault();\n}\n\nexport function VideoContainer() {\n    const classes = useClasses();\n\n    const [container, setContainer] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        STATE.setRendererContainer(container);\n\n        if (!container) {\n            return;\n        }\n\n        container.addEventListener(\"wheel\", handleWheel, {\n            passive: false,\n        });\n\n        return () => {\n            container.removeEventListener(\"wheel\", handleWheel);\n        };\n    }, [container]);\n\n    return (\n        <div\n            ref={setContainer}\n            className={classes.video}\n            style={{\n                width: STATE.width,\n                height: STATE.height,\n                transform: `translate(${\n                    (STATE.rotatedWidth - STATE.width) / 2\n                }px, ${(STATE.rotatedHeight - STATE.height) / 2}px) rotate(${\n                    STATE.rotation * 90\n                }deg)`,\n            }}\n            onPointerDown={handlePointerDown}\n            onPointerMove={handlePointerMove}\n            onPointerUp={handlePointerUp}\n            onPointerCancel={handlePointerUp}\n            onPointerLeave={handlePointerLeave}\n            onContextMenu={handleContextMenu}\n        />\n    );\n}\n","export * from \"./command-bar\";\nexport * from \"./fetch-server\";\nexport * from \"./navigation-bar\";\nexport * from \"./settings\";\nexport * from \"./state\";\nexport * from \"./video-container\";\n","import { useEffect } from \"react\";\n\ntype CommonEventMaps<T> = T extends typeof globalThis\n    ? WindowEventMap\n    : T extends Window\n    ? WindowEventMap\n    : T extends Document\n    ? DocumentEventMap\n    : T extends HTMLElement\n    ? HTMLElementEventMap\n    : T extends SVGElement\n    ? SVGElementEventMap\n    : { [type: string]: unknown };\n\nconst useClientAddEventListener = <\n    T extends EventTarget,\n    U extends keyof CommonEventMaps<T>\n>(\n    target: T | (() => T),\n    type: U,\n    listener: (this: T, ev: CommonEventMaps<T>[U]) => any,\n    options?: AddEventListenerOptions,\n    deps?: readonly unknown[]\n) => {\n    useEffect(() => {\n        const targetValue = typeof target === \"function\" ? target() : target;\n        targetValue.addEventListener(type as any, listener as any, options);\n\n        return () =>\n            targetValue.removeEventListener(\n                type as any,\n                listener as any,\n                options\n            );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, deps);\n};\n\nexport const useAddEventListener =\n    typeof window !== \"undefined\" ? useClientAddEventListener : () => {};\n","import { useLayoutEffect as useReactLayoutEffect } from \"react\";\n\nexport const useLayoutEffect =\n    typeof window !== \"undefined\" ? useReactLayoutEffect : () => {};\n","import { MutableRefObject, useRef } from \"react\";\n\nimport { useLayoutEffect } from \"./layout-effect\";\n\nconst UNINITIALIZED = Symbol(\"UNINITIALIZED\");\n\nexport function useConstLazy<T>(initializer: () => T): T {\n    const ref = useRef<T | typeof UNINITIALIZED>(UNINITIALIZED);\n    if (ref.current === UNINITIALIZED) {\n        ref.current = initializer();\n    }\n    return ref.current;\n}\n\nexport function useConst<T>(value: T): T {\n    const ref = useRef(value);\n    return ref.current;\n}\n\nexport function useLatestRef<T>(value: T): MutableRefObject<T> {\n    const ref = useRef(value);\n    useLayoutEffect(() => {\n        ref.current = value;\n    }, [value]);\n    return ref;\n}\n\nexport function useStableCallback<T extends (...args: any[]) => void>(\n    callback: T\n): T {\n    const callbackRef = useLatestRef(callback);\n    return useConst(function (...args) {\n        return callbackRef.current(...args);\n    } as T);\n}\n","import { useState } from \"react\";\n\nimport { useAddEventListener } from \"./add-event-listener\";\nimport { useStableCallback } from \"./stable-callback\";\n\nfunction useClientLocalStorage<T extends string = string>(\n    key: string,\n    fallbackValue: T\n) {\n    const [value, setValue] = useState<T>(\n        () => (localStorage.getItem(key) as T) || fallbackValue\n    );\n\n    useAddEventListener(\n        globalThis,\n        \"storage\",\n        () =>\n            setValue((localStorage.getItem(key) as T | null) ?? fallbackValue),\n        { passive: true },\n        [key, fallbackValue]\n    );\n\n    const handleChange = useStableCallback((value: T) => {\n        setValue(value);\n        localStorage.setItem(key, value);\n    });\n\n    return [value, handleChange] as const;\n}\n\nexport const useLocalStorage: typeof useClientLocalStorage =\n    typeof localStorage !== \"undefined\"\n        ? useClientLocalStorage\n        : (key, fallbackValue) => [fallbackValue, () => {}];\n","export * from \"./add-event-listener\";\nexport * from \"./layout-effect\";\nexport * from \"./local-storage\";\nexport * from \"./stable-callback\";\n","import {\n    Dialog,\n    LayerHost,\n    Link,\n    PrimaryButton,\n    ProgressIndicator,\n    Stack,\n    StackItem,\n} from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { makeStyles, shorthands } from \"@griffel/react\";\nimport { WebCodecsDecoder } from \"@yume-chan/scrcpy-decoder-webcodecs\";\nimport { action, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { KeyboardEvent, useEffect, useState } from \"react\";\nimport { DeviceView, ExternalLink } from \"../components\";\nimport {\n    NavigationBar,\n    SETTING_DEFINITIONS,\n    SETTING_STATE,\n    STATE,\n    ScrcpyCommandBar,\n    SettingItem,\n    VideoContainer,\n} from \"../components/scrcpy\";\nimport { useLocalStorage } from \"../hooks\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { CommonStackTokens, RouteStackProps, formatSpeed } from \"../utils\";\n\nconst useClasses = makeStyles({\n    layerHost: {\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        pointerEvents: \"none\",\n        ...shorthands.margin(0),\n    },\n    fullScreenContainer: {\n        flexGrow: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: \"black\",\n        \":focus-visible\": {\n            ...shorthands.outline(\"0\"),\n        },\n    },\n    fullScreenStatusBar: {\n        display: \"flex\",\n        color: \"white\",\n        columnGap: \"12px\",\n        ...shorthands.padding(\"8px\", \"20px\"),\n    },\n    spacer: {\n        flexGrow: 1,\n    },\n});\n\nconst ConnectingDialog = observer(() => {\n    const classes = useClasses();\n    const layerHostId = useId(\"layerHost\");\n\n    const [isClient, setIsClient] = useState(false);\n\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    if (!isClient) {\n        return null;\n    }\n\n    return (\n        <>\n            <LayerHost id={layerHostId} className={classes.layerHost} />\n\n            <Dialog\n                hidden={!STATE.connecting}\n                modalProps={{ layerProps: { hostId: layerHostId } }}\n                dialogContentProps={{ title: \"Connecting...\" }}\n            >\n                <Stack tokens={CommonStackTokens}>\n                    <ProgressIndicator\n                        label=\"Downloading scrcpy server...\"\n                        percentComplete={\n                            STATE.serverTotalSize\n                                ? STATE.serverDownloadedSize /\n                                  STATE.serverTotalSize\n                                : undefined\n                        }\n                        description={formatSpeed(\n                            STATE.debouncedServerDownloadedSize,\n                            STATE.serverTotalSize,\n                            STATE.serverDownloadSpeed,\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"Pushing scrcpy server to device...\"\n                        progressHidden={\n                            STATE.serverTotalSize === 0 ||\n                            STATE.serverDownloadedSize !== STATE.serverTotalSize\n                        }\n                        percentComplete={\n                            STATE.serverUploadedSize / STATE.serverTotalSize\n                        }\n                        description={formatSpeed(\n                            STATE.debouncedServerUploadedSize,\n                            STATE.serverTotalSize,\n                            STATE.serverUploadSpeed,\n                        )}\n                    />\n\n                    <ProgressIndicator\n                        label=\"Starting scrcpy server on device...\"\n                        progressHidden={\n                            STATE.serverTotalSize === 0 ||\n                            STATE.serverUploadedSize !== STATE.serverTotalSize\n                        }\n                    />\n                </Stack>\n            </Dialog>\n        </>\n    );\n});\n\nasync function handleKeyEvent(e: KeyboardEvent<HTMLDivElement>) {\n    if (!STATE.client) {\n        return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { type, code } = e;\n    STATE.keyboard![type === \"keydown\" ? \"down\" : \"up\"](code);\n}\n\nfunction handleBlur() {\n    if (!STATE.client) {\n        return;\n    }\n\n    STATE.keyboard?.reset();\n}\n\nconst FullscreenHint = observer(function FullscreenHint({\n    keyboardLockEnabled,\n}: {\n    keyboardLockEnabled: boolean;\n}) {\n    const classes = useClasses();\n\n    const [hintHidden, setHintHidden] = useLocalStorage<`${boolean}`>(\n        \"scrcpy-hint-hidden\",\n        \"false\",\n    );\n\n    if (!keyboardLockEnabled || !STATE.isFullScreen || hintHidden === \"true\") {\n        return null;\n    }\n\n    return (\n        <div className={classes.fullScreenStatusBar}>\n            <div>{GLOBAL_STATE.device?.serial}</div>\n            <div>FPS: {STATE.fps}</div>\n\n            <div className={classes.spacer} />\n\n            <div>Press and hold ESC to exit full screen</div>\n\n            <Link onClick={() => setHintHidden(\"true\")}>\n                {`Don't show again`}\n            </Link>\n        </div>\n    );\n});\n\nconst Scrcpy: NextPage = () => {\n    const classes = useClasses();\n\n    useEffect(() => {\n        // Detect WebCodecs support at client side\n        if (\n            SETTING_STATE.decoders.length === 1 &&\n            WebCodecsDecoder.isSupported()\n        ) {\n            runInAction(() => {\n                SETTING_STATE.decoders.unshift({\n                    key: \"webcodecs\",\n                    name: \"WebCodecs\",\n                    Constructor: WebCodecsDecoder,\n                });\n            });\n        }\n    }, []);\n\n    const [keyboardLockEnabled, setKeyboardLockEnabled] = useState(false);\n    useEffect(() => {\n        if (!(\"keyboard\" in navigator)) {\n            return;\n        }\n\n        // Keyboard Lock is only effective in fullscreen mode,\n        // but the `lock` method can be called at any time.\n\n        // @ts-expect-error\n        navigator.keyboard.lock();\n        setKeyboardLockEnabled(true);\n\n        return () => {\n            // @ts-expect-error\n            navigator.keyboard.unlock();\n        };\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener(\"blur\", handleBlur);\n\n        return () => {\n            window.removeEventListener(\"blur\", handleBlur);\n        };\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Scrcpy</title>\n            </Head>\n\n            {STATE.running ? (\n                <>\n                    <ScrcpyCommandBar />\n\n                    <Stack horizontal grow styles={{ root: { height: 0 } }}>\n                        <div\n                            ref={STATE.setFullScreenContainer}\n                            className={classes.fullScreenContainer}\n                            tabIndex={0}\n                            onKeyDown={handleKeyEvent}\n                            onKeyUp={handleKeyEvent}\n                        >\n                            <FullscreenHint\n                                keyboardLockEnabled={keyboardLockEnabled}\n                            />\n\n                            <DeviceView\n                                width={STATE.rotatedWidth}\n                                height={STATE.rotatedHeight}\n                                BottomElement={NavigationBar}\n                            >\n                                <VideoContainer />\n                            </DeviceView>\n                        </div>\n                    </Stack>\n                </>\n            ) : (\n                <>\n                    <StackItem align=\"start\">\n                        <PrimaryButton\n                            text=\"Connect Scrcpy\"\n                            disabled={!GLOBAL_STATE.adb}\n                            onClick={STATE.start}\n                        />\n                    </StackItem>\n\n                    {SETTING_DEFINITIONS.get().map((definition) => (\n                        <SettingItem\n                            key={definition.key}\n                            definition={definition}\n                            value={\n                                (SETTING_STATE[definition.group] as any)[\n                                    definition.key\n                                ]\n                            }\n                            onChange={action(\n                                (definition, value) =>\n                                    ((SETTING_STATE[definition.group] as any)[\n                                        definition.key\n                                    ] = value),\n                            )}\n                        />\n                    ))}\n\n                    <ConnectingDialog />\n                </>\n            )}\n        </Stack>\n    );\n};\n\nexport default observer(Scrcpy);\n"],"names":["CommandBarSpacerItem","container","setContainer","useState","useEffect","parent","parentElement","originalFlexGrow","style","flexGrow","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","ref","cachedValue","MatroskaVideoCodecNameMap","ScrcpyVideoCodecId","H264","H265","AV1","MatroskaAudioCodecNameMap","ScrcpyAudioCodec","RAW","mimeType","AAC","OPUS","MatroskaMuxingRecorder","addVideoChunk","packet","_firstTimestamp","Number","pts","sample","h264StreamToAvcSample","buffer","nalUnits","totalLength","unit","annexBSplitNalu","push","byteLength","Uint8Array","offset","nalu","set","data","muxer","addVideoChunkRaw","keyframe","configurationWritten","undefined","decoderConfig","codec","description","videoCodecDescription","addVideoPacket","videoMetadata","type","sequenceParameterSet","pictureParameterSet","h264SearchConfiguration","h264ConfigurationToAvcDecoderConfigurationRecord","videoParameterSet","h265SearchConfiguration","h265ConfigurationToHevcDecoderConfigurationRecord","profileTierLevel","generalProfileTier","profile_space","general_profile_space","tier_flag","general_tier_flag","profile_idc","general_profile_idc","profileCompatibilitySet","generalProfileCompatibilitySet","constraintSet","generalConstraintSet","general_level_idc","vps_max_layers_minus1","vps_temporal_id_nesting_flag","h265ParseVideoParameterSet","rbsp","chroma_format_idc","bit_depth_luma_minus8","bit_depth_chroma_minus8","vuiParameters","min_spatial_segmentation_idc","h265ParseSequenceParameterSet","length","i","nal_unit_type","_packetsFromLastKeyframe","e","console","error","addAudioChunk","chunk","timestamp","addAudioChunkRaw","addAudioPacket","start","_this_videoMetadata_width","_this_videoMetadata_height","running","options","target","ArrayBufferTarget","firstTimestampBehavior","video","width","height","audioCodec","audio","sampleRate","numberOfChannels","bitDepth","WebMMuxer","stop","finalize","now","Date","stream","saveFile","concat","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","writer","getWriter","write","close","RECORD_STATE","makeAutoObservable","recorder","recording","intervalId","hours","minutes","seconds","reaction","globalThis","setInterval","action","clearInterval","AacDecodeStream","TransformStream","constructor","config","decoder","controller","AudioDecoder","log","output","enqueue","Array","from","_","format","planeIndex","Float32Array","allocationSize","BYTES_PER_ELEMENT","copyTo","transform","configure","decode","EncodedAudioChunk","flush","OpusDecodeStream","FetchWithProgress","downloaded","_downloaded","total","_total","onProgress","progressEvent","event","fetch","url","response","parseInt","headers","get","fire","reader","body","getReader","chunks","result","read","done","value","reduce","item","position","EventEmitter","promise","fetchServer","BIN","catch","ScrcpyKeyboardInjector","setModifier","keyCode","AndroidKeyCode","ControlLeft","_controlLeft","ControlRight","_controlRight","ShiftLeft","_shiftLeft","ShiftRight","_shiftRight","AltLeft","_altLeft","AltRight","_altRight","MetaLeft","_metaLeft","MetaRight","_metaRight","CapsLock","_capsLock","NumLock","_numLock","getMetaState","metaState","AndroidKeyEventMeta","AltOn","AltLeftOn","AltRightOn","ShiftOn","ShiftLeftOn","ShiftRightOn","CtrlOn","CtrlLeftOn","CtrlRightOn","MetaOn","MetaLeftOn","MetaRightOn","CapsLockOn","NumLockOn","down","key","_this_client_controlMessageWriter","_keys","add","client","controlMessageWriter","injectKeyCode","AndroidKeyEventAction","Down","repeat","up","delete","Up","reset","clear","dispose","Set","AoaKeyboardInjector","register","device","keyboard","AoaHidDevice","HidKeyboard","DESCRIPTOR","HidKeyCode","hidKeyboard","aoaKeyboard","sendInputReport","serializeInputReport","unregister","useClasses","makeStyles","labelRight","marginLeft","maxWidth","SettingItem","observer","param","definition","onChange","classes","label","jsx_runtime","jsxs","Stack","horizontal","verticalAlign","span","TooltipHost","content","Icon","className","iconName","Icons","Info","labelExtra","TextField","placeholder","Dropdown","selectedKey","option","Toggle","checked","disabled","SpinButton","labelPosition","Position","top","min","max","step","DEFAULT_SETTINGS","maxSize","videoBitRate","videoCodec","lockVideoOrientation","ScrcpyVideoOrientation","Unlocked","displayId","crop","powerOn","SETTING_STATE","displays","encoders","decoders","name","Constructor","TinyH264Decoder","settings","clientSettings","observable","shallow","deep","SCRCPY_SETTINGS_FILENAME","autorun","GLOBAL_STATE","adb","sync","pipeThrough","DecodeUtf8Stream","ConcatStringStream","JSON","parse","videoCodecOptions","CodecOptions","audioCodecOptions","runInAction","AdbSyncError","SETTING_DEFINITIONS","computed","group","IconButton","iconProps","ArrowClockwise","text","onClick","STATE","pushServer","AdbScrcpyClient","getDisplays","DEFAULT_SERVER_PATH","VERSION","AdbScrcpyOptionsLatest","ScrcpyOptionsLatest","logLevel","ScrcpyLogLevel","Debug","some","x","id","showErrorDialog","map","resolution","getEncoders","filter","Initial","Portrait","Landscape","PortraitFlipped","LandscapeFlipped","videoEncoder","audioEncoder","encodersForCurrentVideoCodec","every","encodersForCurrentAudioCodec","rotatedWidth","rotation","rotatedHeight","serverBuffer","ReadableStream","Consumable","_this_client","_this_decoder","_this_keyboard","_this_audioPlayer","audioPlayer","fps","clearTimeout","fpsCounterIntervalId","isFullScreen","document","exitFullscreen","setFullScreenContainer","element","fullScreenContainer","setRendererContainer","rendererContainer","clientPositionToDevicePosition","clientX","clientY","viewRect","getBoundingClientRect","pointerViewX","clamp","pointerViewY","y","logVisible","demoModeVisible","navigationBarVisible","hoverHelper","connecting","serverTotalSize","serverDownloadedSize","debouncedServerDownloadedSize","serverDownloadSpeed","serverUploadedSize","debouncedServerUploadedSize","serverUploadSpeed","DistributionStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","progress","decoderDefinition","find","ignoreDecoderCodecArgs","capability","capabilities","profile","maxProfile","level","maxLevel","scid","ScrcpyInstanceId","random","sendDeviceMeta","sendDummyByte","serialize","join","stdout","pipeTo","WritableStream","line","filename","file","encodeUtf8","stringify","videoStream","then","metadata","lastFrameRendered","lastFrameSkipped","deltaRendered","frameRendered","deltaSkipped","frameSkipped","lastKeyframe","handler","InspectStream","croppedWidth","croppedHeight","h264ParseConfiguration","h265ParseConfiguration","interval","writable","audioStream","recordStream","playbackStream","tee","Int16PcmPlayer","feed","Int16Array","byteOffset","Float32PcmPlayer","webCodecId","Float32PlanerPcmPlayer","optionValue","exit","deviceMessageStream","message","ScrcpyDeviceMessageType","Clipboard","navigator","clipboard","writeText","turnScreenOff","setScreenPowerMode","AndroidScreenPowerMode","Off","ScrcpyHoverHelper","AdbDaemonWebUsbDevice","raw","bound","addEventListener","fullscreenElement","firstChild","remove","appendChild","renderer","ITEMS","Stop","Record","color","focus","Speaker2","iconOnly","VolumeUp","Speaker1","VolumeDown","SpeakerOff","VolumeMute","Lightbulb","LightbulbFilament","Normal","onRender","itemType","ContextualMenuItemType","Divider","PanelBottom","canCheck","ScrcpyCommandBar","CommandBar","items","backgroundColor","bar","icon","back","handlePointerDown","button","currentTarget","setPointerCapture","pointerId","preventDefault","stopPropagation","handlePointerUp","handleBackPointerDown","backOrScreenOn","handleBackPointerUp","handleHomePointerDown","AndroidHome","handleHomePointerUp","handleAppSwitchPointerDown","AndroidAppSwitch","handleAppSwitchPointerUp","NavigationBar","children","mergeClasses","verticalFill","horizontalAlign","Play","onPointerDown","onPointerUp","Circle","transformOrigin","touchAction","handleWheel","injectScroll","screenWidth","screenHeight","pointerX","pointerY","scrollX","deltaX","scrollY","deltaY","buttons","MOUSE_EVENT_BUTTON_TO_ANDROID_BUTTON","AndroidMotionEventButton","Primary","Tertiary","Secondary","Back","Forward","injectTouch","pointerType","ScrcpyPointerId","Finger","BigInt","messages","process","pressure","actionButton","AndroidMotionEventAction","handlePointerMove","HoverMove","Move","handlePointerLeave","HoverExit","handleContextMenu","VideoContainer","passive","removeEventListener","onPointerMove","onPointerCancel","onPointerLeave","onContextMenu","useAddEventListener","listener","deps","targetValue","useLayoutEffect","useReactLayoutEffect","Symbol","useLocalStorage","localStorage","fallbackValue","setValue","getItem","handleChange","useStableCallback","callback","callbackRef","useLatestRef","useRef","current","useConst","_len","arguments","args","_key","setItem","layerHost","bottom","left","right","pointerEvents","shorthands","margin","display","flexDirection","outline","fullScreenStatusBar","columnGap","padding","spacer","ConnectingDialog","layerHostId","useId","isClient","setIsClient","Fragment","LayerHost","Dialog","hidden","modalProps","layerProps","hostId","dialogContentProps","title","tokens","CommonStackTokens","ProgressIndicator","percentComplete","formatSpeed","progressHidden","handleKeyEvent","code","handleBlur","FullscreenHint","keyboardLockEnabled","hintHidden","setHintHidden","serial","Link","scrcpy","WebCodecsDecoder","isSupported","unshift","setKeyboardLockEnabled","lock","unlock","window","RouteStackProps","Head","grow","styles","root","tabIndex","onKeyDown","onKeyUp","DeviceView","BottomElement","StackItem","align","PrimaryButton"],"sourceRoot":""}