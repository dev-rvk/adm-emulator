{"version":3,"file":"static/chunks/pages/tcpip-317fc7f0fb42d336.js","mappings":"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","sources":["webpack://_N_E/?5625","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/Text/Text.view.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/Text/Text.styles.ts","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/Text/Text.ts","webpack://_N_E/./src/pages/tcpip.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.119.3_@types+react-dom@18.3.0_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return require(\"private-next-pages/tcpip.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/tcpip\"])\n      });\n    }\n  ","/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport { withSlots, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport type { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  // eslint-disable-next-line eqeqeq\n  if (props.children == null) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n","import type { ITextComponent, ITextStyles, ITextStylesReturnType, ITextProps } from './Text.types';\nimport type { ITheme } from '../../Styling';\n\nexport const TextStyles: ITextComponent['styles'] = (props: ITextProps, theme: ITheme): ITextStylesReturnType => {\n  const { as, className, block, nowrap, variant } = props;\n  const { fonts, semanticColors } = theme;\n  const variantObject = fonts[variant || 'medium'];\n\n  return {\n    root: [\n      variantObject,\n      {\n        color: variantObject.color || semanticColors.bodyText,\n        display: block ? (as === 'td' ? 'table-cell' : 'block') : 'inline',\n        mozOsxFontSmoothing: variantObject.MozOsxFontSmoothing,\n        webkitFontSmoothing: variantObject.WebkitFontSmoothing,\n      },\n      nowrap && {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n      className,\n    ],\n  } as ITextStyles;\n};\n","import * as React from 'react';\nimport { createComponent } from '@fluentui/foundation-legacy';\nimport { TextView } from './Text.view';\nimport { TextStyles as styles } from './Text.styles';\nimport type { ITextProps } from './Text.types';\n\nexport const Text: React.FunctionComponent<ITextProps> = createComponent(TextView, {\n  displayName: 'Text',\n  styles,\n});\n\nexport default Text;\n","// cspell: ignore addrs\n\nimport {\n    ICommandBarItemProps,\n    MessageBar,\n    Stack,\n    StackItem,\n    Text,\n    TextField,\n    Toggle,\n} from \"@fluentui/react\";\nimport { autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect } from \"react\";\nimport { CommandBar, ExternalLink } from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { Icons, RouteStackProps, asyncEffect } from \"../utils\";\n\nclass TcpIpState {\n    initial = true;\n    visible = false;\n    serviceListenAddresses: string[] | undefined = undefined;\n    servicePortEnabled = false;\n    servicePort: string = \"\";\n    persistPortEnabled = false;\n    persistPort: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false,\n        });\n\n        autorun(() => {\n            if (GLOBAL_STATE.adb) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"refresh\",\n                disabled: !GLOBAL_STATE.adb,\n                iconProps: { iconName: Icons.ArrowClockwise },\n                text: \"Refresh\",\n                onClick: this.queryInfo as VoidFunction,\n            },\n            {\n                key: \"apply\",\n                disabled: !GLOBAL_STATE.adb,\n                iconProps: { iconName: Icons.Save },\n                text: \"Apply\",\n                onClick: this.applyServicePort,\n            },\n        ];\n    }\n\n    queryInfo = asyncEffect(async (signal) => {\n        if (!GLOBAL_STATE.adb) {\n            runInAction(() => {\n                this.serviceListenAddresses = undefined;\n                this.servicePortEnabled = false;\n                this.servicePort = \"\";\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            });\n            return;\n        }\n\n        const serviceListenAddresses = await GLOBAL_STATE.adb.getProp(\n            \"service.adb.listen_addrs\",\n        );\n        const servicePort = await GLOBAL_STATE.adb.getProp(\n            \"service.adb.tcp.port\",\n        );\n        const persistPort = await GLOBAL_STATE.adb.getProp(\n            \"persist.adb.tcp.port\",\n        );\n\n        if (signal.aborted) {\n            return;\n        }\n\n        runInAction(() => {\n            this.serviceListenAddresses =\n                serviceListenAddresses !== \"\"\n                    ? serviceListenAddresses.split(\",\")\n                    : undefined;\n\n            if (servicePort) {\n                this.servicePortEnabled =\n                    !serviceListenAddresses && servicePort !== \"0\";\n                this.servicePort = servicePort;\n            } else {\n                this.servicePortEnabled = false;\n                this.servicePort = \"5555\";\n            }\n\n            if (persistPort) {\n                this.persistPortEnabled =\n                    !serviceListenAddresses && !servicePort;\n                this.persistPort = persistPort;\n            } else {\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            }\n        });\n    });\n\n    applyServicePort = async () => {\n        if (!GLOBAL_STATE.adb) {\n            return;\n        }\n\n        if (state.servicePortEnabled) {\n            await GLOBAL_STATE.adb.tcpip.setPort(\n                Number.parseInt(state.servicePort, 10),\n            );\n        } else {\n            await GLOBAL_STATE.adb.tcpip.disable();\n        }\n    };\n}\n\nconst state = new TcpIpState();\n\nconst TcpIp: NextPage = () => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    }, []);\n\n    const handleServicePortEnabledChange = useCallback(\n        (e: unknown, value?: boolean) => {\n            runInAction(() => {\n                state.servicePortEnabled = !!value;\n            });\n        },\n        [],\n    );\n\n    const handleServicePortChange = useCallback(\n        (e: unknown, value?: string) => {\n            if (value === undefined) {\n                return;\n            }\n            runInAction(() => (state.servicePort = value));\n        },\n        [],\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>ADB over WiFi</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem>\n                <MessageBar delayedRender={false}>\n                    <Text>\n                        For Tango to wirelessly connect to your device,\n                        <ExternalLink\n                            href=\"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\"\n                            spaceBefore\n                            spaceAfter\n                        >\n                            extra software\n                        </ExternalLink>\n                        is required.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar delayedRender={false}>\n                    <Text>\n                        Your device will disconnect after changing ADB over WiFi\n                        config.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.serviceListenAddresses?.map((address) => (\n                    <TextField\n                        key={address}\n                        disabled\n                        value={address}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={state.servicePortEnabled}\n                    disabled={\n                        !GLOBAL_STATE.adb || !!state.serviceListenAddresses\n                    }\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                <TextField\n                    disabled={\n                        !GLOBAL_STATE.adb || !!state.serviceListenAddresses\n                    }\n                    value={state.servicePort}\n                    styles={{ root: { width: 300 } }}\n                    onChange={handleServicePortChange}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={state.persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.persistPort && (\n                    <TextField\n                        disabled\n                        value={state.persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(TcpIp);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n    onExpandButtonToggled = undefined,\n  } = props;\n\n  // Wrap 'toggleExpandSingleLine' to execute the 'onExpandButtonToggled' callback whenever the expand button toggles\n  const handleToggleExpandSingleLine = React.useCallback(() => {\n    toggleExpandSingleLine();\n    if (onExpandButtonToggled) {\n      // We use the opposite of 'expandSingleLine' here because at this point the useBoolean's\n      // useState hasn't been updated yet.\n      onExpandButtonToggled(!expandSingleLine);\n    }\n  }, [expandSingleLine, onExpandButtonToggled, toggleExpandSingleLine]);\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={handleToggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  HighContrastSelectorWhite,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nconst highContrastBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#ff0000',\n  [MessageBarType.blocked]: '#ff0000',\n  [MessageBarType.success]: '#bad80a',\n  [MessageBarType.warning]: '#fff100',\n  [MessageBarType.severeWarning]: '#ff0000',\n  [MessageBarType.info]: 'WindowText',\n};\n\nconst highContrastWhiteBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#e81123',\n  [MessageBarType.blocked]: '#e81123',\n  [MessageBarType.success]: '#107c10',\n  [MessageBarType.warning]: '#966400',\n  [MessageBarType.severeWarning]: '#d83b01',\n  [MessageBarType.info]: 'WindowText',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        boxSizing: 'border-box',\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: 'transparent',\n            border: `1px solid ${highContrastBorderColor[messageBarType]}`,\n            color: 'WindowText',\n          },\n          [HighContrastSelectorWhite]: {\n            border: `1px solid ${highContrastWhiteBorderColor[messageBarType]}`,\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n        [SmallScreenSelector]: {\n          display: 'grid',\n          gridTemplateColumns: 'auto 1fr auto',\n          gridTemplateRows: '1fr auto',\n          gridTemplateAreas: `\n            \"icon text close\"\n            \"action action action\"\n          `,\n        },\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n        [SmallScreenSelector]: {\n          gridArea: 'icon',\n        },\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        [SmallScreenSelector]: {\n          gridArea: 'text',\n        },\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: [\n      classNames.dismissSingleLine,\n      {\n        [SmallScreenSelector]: {\n          gridArea: 'close',\n        },\n      },\n    ],\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        // reset forced colors to browser control for inner actions\n        forcedColorAdjust: 'auto',\n        MsHighContrastAdjust: 'auto',\n        [SmallScreenSelector]: {\n          gridArea: 'action',\n          marginRight: 8,\n          marginBottom: 8,\n        },\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n            [SmallScreenSelector]: {\n              marginBottom: 0,\n            },\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Callback to execute when expand button is toggled\n   * @returns\n   */\n  onExpandButtonToggled?: (expandSingleLine: boolean) => void;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","Text","createComponent","L","props","children","block","className","_a","as","rest","variant","nowrap","tslib_es6","_T","Slots","slots","FJ","root","Yb","pi","properties","pq","iY","displayName","styles","theme","semanticColors","variantObject","fonts","color","bodyText","display","mozOsxFontSmoothing","MozOsxFontSmoothing","webkitFontSmoothing","WebkitFontSmoothing","whiteSpace","overflow","textOverflow","state","commandBarItems","key","disabled","GLOBAL_STATE","adb","iconProps","iconName","Icons","ArrowClockwise","text","onClick","queryInfo","Save","applyServicePort","constructor","initial","visible","serviceListenAddresses","undefined","servicePortEnabled","servicePort","persistPortEnabled","persistPort","asyncEffect","signal","runInAction","getProp","aborted","split","tcpip","setPort","Number","parseInt","disable","makeAutoObservable","autorun","observer","useEffect","handleServicePortEnabledChange","useCallback","e","value","handleServicePortChange","jsx_runtime","jsxs","Stack","RouteStackProps","jsx","Head","title","CommandBar","items","StackItem","MessageBar","delayedRender","ExternalLink","href","spaceBefore","spaceAfter","Toggle","inlineLabel","label","checked","onText","offText","map","TextField","address","width","onChange","ICON_MAP","MessageBar_types","f","info","warning","error","blocked","severeWarning","success","getClassNames","classNamesFunction","y","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","react","forwardRef","ref","useBoolean","k","expandSingleLine","toggleExpandSingleLine","toggle","labelId","useId","M","actions","overflowButtonAriaLabel","dismissIconProps","_b","_c","onDismiss","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","expandButtonProps","_f","onExpandButtonToggled","handleToggleExpandSingleLine","nativeProps","classNames","regionProps","actionsDiv","createElement","dismissButton","IconButton","h","dismissal","ariaLabel","content","iconContainer","Icon","J","css","i","icon","id","innerText","DelayedRender","U","expand","dismissSingleLine","GlobalClassNames","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","MessageBar_styles_a","iconColor","highContrastBorderColor","highContrastWhiteBorderColor","styled","z","_m","SmallScreenSelector","lib","sK","mV","Cn","dismissalAndExpandIconStyle","fontSize","ld","xSmall","height","lineHeight","messageText","selectors","qJ","xM","dismissalAndExpandStyle","GL","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","padding","medium","background","boxSizing","minHeight","wordBreak","messageLink","messageLinkHovered","border","concat","bO","flexDirection","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","minWidth","margin","gridArea","flexGrow","small","_g","marginRight","paddingLeft","_h","_j","_k","flexBasis","alignItems","forcedColorAdjust","MsHighContrastAdjust","marginBottom","_l","marginLeft","scope","MessageBarType"],"sourceRoot":""}