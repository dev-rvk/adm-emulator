{"version":3,"file":"static/chunks/pages/tcpip-9b738795ad077747.js","mappings":"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","sources":["webpack://_N_E/?1fdf","webpack://_N_E/./src/pages/tcpip.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.122.9_@types+react-dom@18.3.5_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.122.9_@types+react-dom@18.3.5_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.122.9_@types+react-dom@18.3.5_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../node_modules/.pnpm/@fluentui+react@8.122.9_@types+react-dom@18.3.5_@types+react@18.2.21_react-dom@18.3.1_react@18.3.1/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return require(\"private-next-pages/tcpip.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/tcpip\"])\n      });\n    }\n  ","// cspell: ignore addrs\n\nimport {\n    ICommandBarItemProps,\n    MessageBar,\n    Stack,\n    StackItem,\n    Text,\n    TextField,\n    Toggle,\n} from \"@fluentui/react\";\nimport { autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect } from \"react\";\nimport { CommandBar, ExternalLink } from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport { Icons, RouteStackProps, asyncEffect } from \"../utils\";\n\nclass TcpIpState {\n    initial = true;\n    visible = false;\n    serviceListenAddresses: string[] | undefined = undefined;\n    servicePortEnabled = false;\n    servicePort: string = \"\";\n    persistPortEnabled = false;\n    persistPort: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false,\n        });\n\n        autorun(() => {\n            if (GLOBAL_STATE.adb) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"refresh\",\n                disabled: !GLOBAL_STATE.adb,\n                iconProps: { iconName: Icons.ArrowClockwise },\n                text: \"Refresh\",\n                onClick: this.queryInfo as VoidFunction,\n            },\n            {\n                key: \"apply\",\n                disabled: !GLOBAL_STATE.adb,\n                iconProps: { iconName: Icons.Save },\n                text: \"Apply\",\n                onClick: this.applyServicePort,\n            },\n        ];\n    }\n\n    queryInfo = asyncEffect(async (signal) => {\n        if (!GLOBAL_STATE.adb) {\n            runInAction(() => {\n                this.serviceListenAddresses = undefined;\n                this.servicePortEnabled = false;\n                this.servicePort = \"\";\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            });\n            return;\n        }\n\n        const serviceListenAddresses = await GLOBAL_STATE.adb.getProp(\n            \"service.adb.listen_addrs\",\n        );\n        const servicePort = await GLOBAL_STATE.adb.getProp(\n            \"service.adb.tcp.port\",\n        );\n        const persistPort = await GLOBAL_STATE.adb.getProp(\n            \"persist.adb.tcp.port\",\n        );\n\n        if (signal.aborted) {\n            return;\n        }\n\n        runInAction(() => {\n            this.serviceListenAddresses =\n                serviceListenAddresses !== \"\"\n                    ? serviceListenAddresses.split(\",\")\n                    : undefined;\n\n            if (servicePort) {\n                this.servicePortEnabled =\n                    !serviceListenAddresses && servicePort !== \"0\";\n                this.servicePort = servicePort;\n            } else {\n                this.servicePortEnabled = false;\n                this.servicePort = \"5555\";\n            }\n\n            if (persistPort) {\n                this.persistPortEnabled =\n                    !serviceListenAddresses && !servicePort;\n                this.persistPort = persistPort;\n            } else {\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            }\n        });\n    });\n\n    applyServicePort = async () => {\n        if (!GLOBAL_STATE.adb) {\n            return;\n        }\n\n        if (state.servicePortEnabled) {\n            await GLOBAL_STATE.adb.tcpip.setPort(\n                Number.parseInt(state.servicePort, 10),\n            );\n        } else {\n            await GLOBAL_STATE.adb.tcpip.disable();\n        }\n    };\n}\n\nconst state = new TcpIpState();\n\nconst TcpIp: NextPage = () => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    }, []);\n\n    const handleServicePortEnabledChange = useCallback(\n        (e: unknown, value?: boolean) => {\n            runInAction(() => {\n                state.servicePortEnabled = !!value;\n            });\n        },\n        [],\n    );\n\n    const handleServicePortChange = useCallback(\n        (e: unknown, value?: string) => {\n            if (value === undefined) {\n                return;\n            }\n            runInAction(() => (state.servicePort = value));\n        },\n        [],\n    );\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>ADB over WiFi</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem>\n                <MessageBar delayedRender={false}>\n                    <Text>\n                        For Tango to wirelessly connect to your device,\n                        <ExternalLink\n                            href=\"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\"\n                            spaceBefore\n                            spaceAfter\n                        >\n                            extra software\n                        </ExternalLink>\n                        is required.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar delayedRender={false}>\n                    <Text>\n                        Your device will disconnect after changing ADB over WiFi\n                        config.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.serviceListenAddresses?.map((address) => (\n                    <TextField\n                        key={address}\n                        disabled\n                        value={address}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={state.servicePortEnabled}\n                    disabled={\n                        !GLOBAL_STATE.adb || !!state.serviceListenAddresses\n                    }\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                <TextField\n                    disabled={\n                        !GLOBAL_STATE.adb || !!state.serviceListenAddresses\n                    }\n                    value={state.servicePort}\n                    styles={{ root: { width: 300 } }}\n                    onChange={handleServicePortChange}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={state.persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.persistPort && (\n                    <TextField\n                        disabled\n                        value={state.persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(TcpIp);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n    onExpandButtonToggled = undefined,\n    showExpandButton,\n  } = props;\n\n  // Wrap 'toggleExpandSingleLine' to execute the 'onExpandButtonToggled' callback whenever the expand button toggles\n  const handleToggleExpandSingleLine = React.useCallback(() => {\n    toggleExpandSingleLine();\n    if (onExpandButtonToggled) {\n      // We use the opposite of 'expandSingleLine' here because at this point the useBoolean's\n      // useState hasn't been updated yet.\n      onExpandButtonToggled(!expandSingleLine);\n    }\n  }, [expandSingleLine, onExpandButtonToggled, toggleExpandSingleLine]);\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ (showExpandButton || (!isMultiline && !actionsDiv && truncated)) && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={handleToggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  HighContrastSelectorWhite,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nconst highContrastBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#ff0000',\n  [MessageBarType.blocked]: '#ff0000',\n  [MessageBarType.success]: '#bad80a',\n  [MessageBarType.warning]: '#fff100',\n  [MessageBarType.severeWarning]: '#ff0000',\n  [MessageBarType.info]: 'WindowText',\n};\n\nconst highContrastWhiteBorderColor: { [key: string]: string } = {\n  [MessageBarType.error]: '#e81123',\n  [MessageBarType.blocked]: '#e81123',\n  [MessageBarType.success]: '#107c10',\n  [MessageBarType.warning]: '#966400',\n  [MessageBarType.severeWarning]: '#d83b01',\n  [MessageBarType.info]: 'WindowText',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        boxSizing: 'border-box',\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: 'transparent',\n            border: `1px solid ${highContrastBorderColor[messageBarType]}`,\n            color: 'WindowText',\n          },\n          [HighContrastSelectorWhite]: {\n            border: `1px solid ${highContrastWhiteBorderColor[messageBarType]}`,\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n        [SmallScreenSelector]: {\n          display: 'grid',\n          gridTemplateColumns: 'auto 1fr auto',\n          gridTemplateRows: '1fr auto',\n          gridTemplateAreas: `\n            \"icon text close\"\n            \"action action action\"\n          `,\n        },\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n        [SmallScreenSelector]: {\n          gridArea: 'icon',\n        },\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        [SmallScreenSelector]: {\n          gridArea: 'text',\n        },\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: [\n      classNames.dismissSingleLine,\n      {\n        [SmallScreenSelector]: {\n          gridArea: 'close',\n        },\n      },\n    ],\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        // reset forced colors to browser control for inner actions\n        forcedColorAdjust: 'auto',\n        MsHighContrastAdjust: 'auto',\n        [SmallScreenSelector]: {\n          gridArea: 'action',\n          marginRight: 8,\n          marginBottom: 8,\n        },\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n            [SmallScreenSelector]: {\n              marginBottom: 0,\n            },\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Callback to execute when expand button is toggled\n   * @returns\n   */\n  onExpandButtonToggled?: (expandSingleLine: boolean) => void;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n\n  /**\n   * An optional override to show the expand/collapse icon. It will only be shown by default for\n   * single-line truncated MessageBars that do not have actions.\n   * @defaultvalue false\n   */\n  showExpandButton?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n"],"names":["window","__NEXT_P","push","__webpack_require__","state","commandBarItems","key","disabled","GLOBAL_STATE","adb","iconProps","iconName","Icons","ArrowClockwise","text","onClick","queryInfo","Save","applyServicePort","constructor","initial","visible","serviceListenAddresses","undefined","servicePortEnabled","servicePort","persistPortEnabled","persistPort","asyncEffect","signal","runInAction","getProp","aborted","split","tcpip","setPort","Number","parseInt","disable","makeAutoObservable","autorun","__webpack_exports__","observer","useEffect","handleServicePortEnabledChange","useCallback","e","value","handleServicePortChange","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","RouteStackProps","jsx","Head","title","CommandBar","items","StackItem","MessageBar","delayedRender","Text","ExternalLink","href","spaceBefore","spaceAfter","Toggle","inlineLabel","label","checked","onText","offText","map","TextField","address","styles","root","width","onChange","ICON_MAP","_a","MessageBar_types","f","info","warning","error","blocked","severeWarning","success","getClassNames","classNamesFunction","y","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","react","forwardRef","props","ref","useBoolean","k","expandSingleLine","toggleExpandSingleLine","toggle","labelId","useId","M","actions","className","children","overflowButtonAriaLabel","dismissIconProps","theme","_b","_c","onDismiss","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","expandButtonProps","_f","onExpandButtonToggled","showExpandButton","handleToggleExpandSingleLine","nativeProps","properties","pq","iY","classNames","regionProps","actionsDiv","createElement","dismissButton","IconButton","h","dismissal","ariaLabel","tslib_es6","pi","content","iconContainer","Icon","J","css","i","icon","id","innerText","DelayedRender","U","expand","dismissSingleLine","displayName","GlobalClassNames","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","MessageBar_styles_a","iconColor","highContrastBorderColor","highContrastWhiteBorderColor","styled","z","_m","semanticColors","fonts","SmallScreenSelector","lib","sK","mV","Cn","dismissalAndExpandIconStyle","fontSize","ld","xSmall","height","lineHeight","color","messageText","selectors","qJ","xM","dismissalAndExpandStyle","GL","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","padding","medium","background","boxSizing","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","concat","bO","flexDirection","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","minWidth","margin","gridArea","flexGrow","small","_g","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","_h","_j","_k","flexBasis","alignItems","forcedColorAdjust","MsHighContrastAdjust","marginBottom","_l","marginLeft","scope","MessageBarType"],"sourceRoot":""}