{"version":3,"file":"static/chunks/pages/packet-log-cbc4ca19cac4b88f.js","mappings":"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","sources":["webpack://_N_E/?5cc9","webpack://_N_E/./src/pages/packet-log.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/packet-log\",\n      function () {\n        return require(\"private-next-pages/packet-log.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/packet-log\"])\n      });\n    }\n  ","import { ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AdbCommand, decodeUtf8 } from \"@yume-chan/adb\";\nimport { action, autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { PointerEvent } from \"react\";\nimport {\n    CommandBar,\n    Grid,\n    GridCellProps,\n    GridColumn,\n    GridHeaderProps,\n    GridRowProps,\n    HexViewer,\n    ObservableListSelection,\n    isModKey,\n    toText,\n} from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport {\n    Icons,\n    RouteStackProps,\n    useStableCallback,\n    withDisplayName,\n} from \"../utils\";\n\nconst ADB_COMMAND_NAME = {\n    [AdbCommand.Auth]: \"AUTH\",\n    [AdbCommand.Close]: \"CLSE\",\n    [AdbCommand.Connect]: \"CNXN\",\n    [AdbCommand.OK]: \"OKAY\",\n    [AdbCommand.Open]: \"OPEN\",\n    [AdbCommand.Write]: \"WRTE\",\n};\n\ninterface Column extends GridColumn {\n    title: string;\n}\n\nconst LINE_HEIGHT = 32;\n\nfunction uint8ArrayToHexString(array: Uint8Array) {\n    return Array.from(array)\n        .map((byte) => byte.toString(16).padStart(2, \"0\"))\n        .join(\" \");\n}\n\nconst state = new (class {\n    get empty() {\n        return !GLOBAL_STATE.logs.length;\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: \"clear\",\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                text: \"Clear\",\n                onClick: action(() => GLOBAL_STATE.clearLog()),\n            },\n            {\n                key: \"select-all\",\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Wand },\n                text: \"Select All\",\n                onClick: action(() => {\n                    this.selection.clear();\n                    this.selection.select(\n                        GLOBAL_STATE.logs.length - 1,\n                        false,\n                        true,\n                    );\n                }),\n            },\n            {\n                key: \"copy\",\n                disabled: this.selection.size === 0,\n                iconProps: { iconName: Icons.Copy },\n                text: \"Copy\",\n                onClick: () => {\n                    let text = \"\";\n                    for (const index of this.selection) {\n                        const entry = GLOBAL_STATE.logs[index];\n                        // prettier-ignore\n                        text += `${\n                            entry.timestamp!.toISOString()\n                        }\\t${\n                            entry.direction === 'in' ? \"IN\" : \"OUT\"\n                        }\\t${\n                            ADB_COMMAND_NAME[entry.command as keyof typeof ADB_COMMAND_NAME]\n                        }\\t${\n                            entry.arg0.toString(16).padStart(8,'0')\n                        }\\t${\n                            entry.arg1.toString(16).padStart(8,'0')\n                        }\\t${\n                            uint8ArrayToHexString(entry.payload)\n                        }\\n`;\n                    }\n                    navigator.clipboard.writeText(text);\n                },\n            },\n        ];\n    }\n\n    selection = new ObservableListSelection();\n\n    constructor() {\n        makeAutoObservable(this, {});\n\n        autorun(() => {\n            if (GLOBAL_STATE.logs.length === 0) {\n                runInAction(() => this.selection.clear());\n            }\n        });\n    }\n})();\n\nconst useClasses = makeStyles({\n    grow: {\n        height: 0,\n    },\n    grid: {\n        height: \"100%\",\n    },\n    header: {\n        textAlign: \"center\",\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        \"&:hover\": {\n            backgroundColor: \"#f3f2f1\",\n        },\n    },\n    selected: {\n        backgroundColor: \"#edebe9\",\n    },\n    code: {\n        fontFamily: \"monospace\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        lineHeight: LINE_HEIGHT + \"px\",\n        cursor: \"default\",\n        ...shorthands.overflow(\"hidden\"),\n    },\n    hexViewer: {\n        ...shorthands.padding(\"12px\"),\n        ...shorthands.borderTop(\"1px\", \"solid\", \"rgb(243, 242, 241)\"),\n    },\n});\n\nconst columns: Column[] = [\n    {\n        title: \"Direction\",\n        width: 100,\n        CellComponent: withDisplayName(\"Direction\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.direction}\n                    </div>\n                );\n            },\n        ),\n    },\n    {\n        title: \"Command\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.commandString) {\n                    item.commandString =\n                        ADB_COMMAND_NAME[item.command as AdbCommand] ??\n                        decodeUtf8(new Uint32Array([item.command]));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.commandString}\n                    </div>\n                );\n            },\n        ),\n    },\n    {\n        title: \"Arg0\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg0String) {\n                    item.arg0String = item.arg0.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg0String}\n                    </div>\n                );\n            },\n        ),\n    },\n    {\n        title: \"Arg1\",\n        width: 100,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.arg1String) {\n                    item.arg1String = item.arg1.toString(16).padStart(8, \"0\");\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.arg1String}\n                    </div>\n                );\n            },\n        ),\n    },\n    {\n        title: \"Payload\",\n        width: 200,\n        flexGrow: 1,\n        CellComponent: withDisplayName(\"Command\")(\n            ({ className, rowIndex, ...rest }: GridCellProps) => {\n                const item = GLOBAL_STATE.logs[rowIndex];\n\n                if (!item.payloadString) {\n                    item.payloadString = toText(item.payload.subarray(0, 100));\n                }\n\n                const classes = useClasses();\n\n                return (\n                    <div\n                        className={mergeClasses(className, classes.code)}\n                        {...rest}\n                    >\n                        {item.payloadString}\n                    </div>\n                );\n            },\n        ),\n    },\n];\n\nconst Header = withDisplayName(\"Header\")(({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) => {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = observer(function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const classes = useClasses();\n\n    const handlePointerDown = useStableCallback(\n        (e: PointerEvent<HTMLDivElement>) => {\n            runInAction(() => {\n                if (e.shiftKey) {\n                    e.preventDefault();\n                }\n                state.selection.select(rowIndex, isModKey(e), e.shiftKey);\n            });\n        },\n    );\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n                state.selection.has(rowIndex) && classes.selected,\n            )}\n            onPointerDown={handlePointerDown}\n            {...rest}\n        />\n    );\n});\n\nconst PacketLog: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps} tokens={{}}>\n            <Head>\n                <title>Packet Log</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem className={classes.grow} grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={GLOBAL_STATE.logs.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n\n            {state.selection.selectedIndex !== null &&\n                GLOBAL_STATE.logs[state.selection.selectedIndex].payload\n                    .length > 0 && (\n                    <StackItem className={classes.grow} grow>\n                        <HexViewer\n                            className={classes.hexViewer}\n                            data={\n                                GLOBAL_STATE.logs[state.selection.selectedIndex]\n                                    .payload\n                            }\n                        />\n                    </StackItem>\n                )}\n        </Stack>\n    );\n};\n\nexport default observer(PacketLog);\n"],"names":["window","__NEXT_P","push","__webpack_require__","ADB_COMMAND_NAME","AdbCommand","Auth","Close","Connect","OK","Open","Write","state","empty","GLOBAL_STATE","logs","length","commandBarItems","key","disabled","iconProps","iconName","Icons","Delete","text","onClick","action","clearLog","Wand","selection","clear","select","size","Copy","index","entry","timestamp","toISOString","direction","command","arg0","toString","padStart","uint8ArrayToHexString","arg1","concat","Array","from","payload","map","byte","join","navigator","clipboard","writeText","constructor","ObservableListSelection","makeAutoObservable","autorun","runInAction","useClasses","makeStyles","grow","height","grid","header","textAlign","lineHeight","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","overflow","hexViewer","padding","borderTop","columns","title","width","CellComponent","withDisplayName","className","rowIndex","rest","param","item","classes","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","div","mergeClasses","commandString","decodeUtf8","Uint32Array","arg0String","arg1String","flexGrow","payloadString","toText","subarray","Header","columnIndex","Row","observer","handlePointerDown","useStableCallback","e","shiftKey","preventDefault","isModKey","has","onPointerDown","__webpack_exports__","jsxs","Stack","RouteStackProps","tokens","Head","CommandBar","items","StackItem","Grid","rowCount","rowHeight","HeaderComponent","RowComponent","selectedIndex","HexViewer","data"],"sourceRoot":""}