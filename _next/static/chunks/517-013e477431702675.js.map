{"version":3,"file":"static/chunks/517-013e477431702675.js","mappings":"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","sources":["webpack://_N_E/./src/pages/file-manager.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {\n    Breadcrumb,\n    ContextualMenu,\n    ContextualMenuItem,\n    DetailsListLayoutMode,\n    Dialog,\n    DirectionalHint,\n    IBreadcrumbItem,\n    IColumn,\n    IContextualMenuItem,\n    IDetailsHeaderProps,\n    IRenderFunction,\n    Icon,\n    Layer,\n    MarqueeSelection,\n    Overlay,\n    ProgressIndicator,\n    Selection,\n    ShimmeredDetailsList,\n    Stack,\n    StackItem,\n    concatStyleSets,\n    mergeStyleSets,\n} from \"@fluentui/react\";\nimport {\n    FileIconType,\n    getFileTypeIconProps,\n    initializeFileTypeIcons,\n} from \"@fluentui/react-file-type-icons\";\nimport { useConst } from \"@fluentui/react-hooks\";\nimport { getIcon } from \"@fluentui/style-utilities\";\nimport {\n    AdbFeature,\n    AdbSync,\n    LinuxFileType,\n    type AdbSyncEntry,\n} from \"@yume-chan/adb\";\nimport { WrapConsumableStream, WritableStream } from \"@yume-chan/stream-extra\";\nimport { EMPTY_UINT8_ARRAY } from \"@yume-chan/struct\";\nimport { Zip, ZipPassThrough } from \"fflate\";\nimport {\n    action,\n    autorun,\n    makeAutoObservable,\n    observable,\n    runInAction,\n} from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Router, { useRouter } from \"next/router\";\nimport path from \"path\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { CommandBar, NoSsr } from \"../components\";\nimport { GLOBAL_STATE } from \"../state\";\nimport {\n    Icons,\n    ProgressStream,\n    RouteStackProps,\n    asyncEffect,\n    createFileStream,\n    formatSize,\n    formatSpeed,\n    pickFile,\n    saveFile,\n} from \"../utils\";\n\ninitializeFileTypeIcons();\n\ninterface ListItem extends AdbSyncEntry {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntry): ListItem {\n    (item as ListItem).key = item.name;\n    return item as ListItem;\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: \"pointer\",\n        \"&:hover\": {\n            textDecoration: \"underline\",\n        },\n    },\n});\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\n    props?,\n    defaultRender?,\n) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } }),\n    });\n};\n\nfunction compareCaseInsensitively(a: string, b: string) {\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\n    if (result !== 0) {\n        return result;\n    } else {\n        return a.localeCompare(b);\n    }\n}\n\nclass FileManagerState {\n    initial = true;\n    visible = false;\n    path = \"/\";\n    loading = false;\n    items: ListItem[] = [];\n    sortKey: keyof ListItem = \"name\";\n    sortDescending = false;\n\n    uploading = false;\n    uploadPath: string | undefined = undefined;\n    uploadedSize = 0;\n    uploadTotalSize = 0;\n    debouncedUploadedSize = 0;\n    uploadSpeed = 0;\n\n    selectedItems: ListItem[] = [];\n    contextMenuTarget: MouseEvent | undefined = undefined;\n\n    get breadcrumbItems(): IBreadcrumbItem[] {\n        let part = \"\";\n        const list: IBreadcrumbItem[] = this.path\n            .split(\"/\")\n            .filter(Boolean)\n            .map((segment) => {\n                part += \"/\" + segment;\n                return {\n                    key: part,\n                    text: segment,\n                    onClick: (e, item) => {\n                        if (!item) {\n                            return;\n                        }\n                        this.pushPathQuery(item.key);\n                    },\n                };\n            });\n        list.unshift({\n            key: \"/\",\n            text: \"Device\",\n            onClick: () => this.pushPathQuery(\"/\"),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        delete list[list.length - 1].onClick;\n        return list;\n    }\n\n    get menuItems() {\n        let result: IContextualMenuItem[] = [];\n\n        switch (this.selectedItems.length) {\n            case 0:\n                result.push({\n                    key: \"upload\",\n                    text: \"Upload\",\n                    iconProps: {\n                        iconName: Icons.CloudArrowUp,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 },\n                    },\n                    disabled: !GLOBAL_STATE.adb,\n                    onClick: () => {\n                        (async () => {\n                            const files = await pickFile({ multiple: true });\n                            for (let i = 0; i < files.length; i++) {\n                                const file = files.item(i)!;\n                                await this.upload(file);\n                            }\n                        })();\n\n                        return false;\n                    },\n                });\n                break;\n            default:\n                result.push(\n                    {\n                        key: \"download\",\n                        text: \"Download\",\n                        iconProps: {\n                            iconName: Icons.CloudArrowDown,\n                            style: {\n                                height: 20,\n                                fontSize: 20,\n                                lineHeight: 1.5,\n                            },\n                        },\n                        onClick: () => {\n                            void this.download();\n                            return false;\n                        },\n                    },\n                    {\n                        key: \"delete\",\n                        text: \"Delete\",\n                        iconProps: {\n                            iconName: Icons.Delete,\n                            style: {\n                                height: 20,\n                                fontSize: 20,\n                                lineHeight: 1.5,\n                            },\n                        },\n                        onClick: () => {\n                            (async () => {\n                                try {\n                                    for (const item of this.selectedItems) {\n                                        const output =\n                                            await GLOBAL_STATE.adb!.rm(\n                                                path.resolve(\n                                                    this.path,\n                                                    item.name!,\n                                                ),\n                                            );\n                                        if (output) {\n                                            GLOBAL_STATE.showErrorDialog(\n                                                output,\n                                            );\n                                            return;\n                                        }\n                                    }\n                                } catch (e: any) {\n                                    GLOBAL_STATE.showErrorDialog(e);\n                                } finally {\n                                    this.loadFiles();\n                                }\n                            })();\n                            return false;\n                        },\n                    },\n                );\n                break;\n        }\n\n        return result;\n    }\n\n    get sortedList() {\n        const list = this.items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[this.sortKey]!;\n                const bSortKey = b[this.sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    // use name as tie breaker\n                    result = compareCaseInsensitively(a.name!, b.name!);\n                } else if (typeof aSortKey === \"string\") {\n                    result = compareCaseInsensitively(\n                        aSortKey,\n                        bSortKey as string,\n                    );\n                } else {\n                    result =\n                        (aSortKey as number) < (bSortKey as number) ? -1 : 1;\n                }\n            }\n\n            if (this.sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        return list;\n    }\n\n    get columns(): IColumn[] {\n        const ICON_SIZE = 20;\n\n        const list: IColumn[] = [\n            {\n                key: \"type\",\n                name: \"File Type\",\n                iconName: Icons.Document20,\n                isIconOnly: true,\n                minWidth: ICON_SIZE,\n                maxWidth: ICON_SIZE,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    let iconName: string;\n\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            // larger sizes of `linkedFolder` icon now have a person symbol on it,\n                            // We want to use it for symbolic links, so use the 16px version\n                            // cspell:disable-next-line\n                            iconName = \"linkedfolder16_svg\";\n                            break;\n                        case LinuxFileType.Directory:\n                            ({ iconName } = getFileTypeIconProps({\n                                type: FileIconType.folder,\n                            }));\n                            break;\n                        case LinuxFileType.File:\n                            ({ iconName } = getFileTypeIconProps({\n                                extension: path.extname(item.name!),\n                            }));\n                            break;\n                        default:\n                            ({ iconName } = getFileTypeIconProps({\n                                type: FileIconType.genericFile,\n                            }));\n                            break;\n                    }\n\n                    // `@fluentui/react-file-type-icons` doesn't export icon src.\n                    const iconSrc = (\n                        getIcon(iconName)!.code as unknown as JSX.Element\n                    ).props.src;\n                    return (\n                        <Icon\n                            imageProps={{\n                                crossOrigin: \"anonymous\",\n                                src: iconSrc,\n                            }}\n                            style={{ width: ICON_SIZE, height: ICON_SIZE }}\n                        />\n                    );\n                },\n            },\n            {\n                key: \"name\",\n                name: \"Name\",\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntry) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                },\n            },\n            {\n                key: \"permission\",\n                name: \"Permission\",\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return `${((item.mode >> 6) & 0b100).toString(8)}${(\n                        (item.mode >> 3) &\n                        0b100\n                    ).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                },\n            },\n            {\n                key: \"size\",\n                name: \"Size\",\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(Number(item.size));\n                    }\n                    return \"\";\n                },\n            },\n            {\n                key: \"mtime\",\n                name: \"Last Modified Time\",\n                minWidth: 150,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return new Date(Number(item.mtime) * 1000).toLocaleString();\n                },\n            },\n        ];\n\n        if (GLOBAL_STATE.adb?.supportsFeature(AdbFeature.ListV2)) {\n            list.push(\n                {\n                    key: \"ctime\",\n                    name: \"Creation Time\",\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(\n                            Number(item.ctime!) * 1000,\n                        ).toLocaleString();\n                    },\n                },\n                {\n                    key: \"atime\",\n                    name: \"Last Access Time\",\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(\n                            Number(item.atime!) * 1000,\n                        ).toLocaleString();\n                    },\n                },\n            );\n        }\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (this.sortKey === column.key) {\n                    runInAction(\n                        () => (this.sortDescending = !this.sortDescending),\n                    );\n                } else {\n                    runInAction(() => {\n                        this.sortKey = column.key as keyof ListItem;\n                        this.sortDescending = false;\n                    });\n                }\n            };\n\n            if (item.key === this.sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = this.sortDescending;\n            }\n        }\n\n        return list;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            items: observable.shallow,\n            pushPathQuery: false,\n            changeDirectory: action.bound,\n            loadFiles: false,\n        });\n\n        autorun(() => {\n            if (GLOBAL_STATE.adb) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.loadFiles();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    private getFileStream(sync: AdbSync, basePath: string, name: string) {\n        return sync.read(path.resolve(basePath, name));\n    }\n\n    private async addDirectory(\n        sync: AdbSync,\n        zip: Zip,\n        basePath: string,\n        relativePath: string,\n    ) {\n        if (relativePath !== \".\") {\n            // Add empty directory\n            const file = new ZipPassThrough(relativePath + \"/\");\n            zip.add(file);\n            file.push(EMPTY_UINT8_ARRAY, true);\n        }\n\n        for (const entry of await sync.readdir(\n            path.resolve(basePath, relativePath),\n        )) {\n            if (entry.name === \".\" || entry.name === \"..\") {\n                continue;\n            }\n\n            switch (entry.type) {\n                case LinuxFileType.Directory:\n                    await this.addDirectory(\n                        sync,\n                        zip,\n                        basePath,\n                        path.resolve(relativePath, entry.name),\n                    );\n                    break;\n                case LinuxFileType.File:\n                    await this.addFile(\n                        sync,\n                        zip,\n                        basePath,\n                        path.resolve(relativePath, entry.name),\n                    );\n                    break;\n            }\n        }\n    }\n\n    private async addFile(\n        sync: AdbSync,\n        zip: Zip,\n        basePath: string,\n        name: string,\n    ) {\n        const file = new ZipPassThrough(name);\n        zip.add(file);\n        await this.getFileStream(sync, basePath, name).pipeTo(\n            new WritableStream({\n                write(chunk) {\n                    file.push(chunk);\n                },\n                close() {\n                    file.push(EMPTY_UINT8_ARRAY, true);\n                },\n            }),\n        );\n    }\n\n    private async download() {\n        const sync = await GLOBAL_STATE.adb!.sync();\n        try {\n            if (this.selectedItems.length === 1) {\n                const item = this.selectedItems[0];\n                switch (item.type) {\n                    case LinuxFileType.Directory: {\n                        const stream = saveFile(\n                            `${this.selectedItems[0].name}.zip`,\n                        );\n                        const writer = stream.getWriter();\n                        const zip = new Zip((err, data, final) => {\n                            writer.write(data);\n                            if (final) {\n                                writer.close();\n                            }\n                        });\n                        await this.addDirectory(\n                            sync,\n                            zip,\n                            path.resolve(this.path, item.name),\n                            \".\",\n                        );\n                        zip.end();\n                        break;\n                    }\n                    case LinuxFileType.File:\n                        await this.getFileStream(\n                            sync,\n                            this.path,\n                            item.name,\n                        ).pipeTo(saveFile(item.name, Number(item.size)));\n                        break;\n                }\n                return;\n            }\n\n            const stream = saveFile(`${path.basename(this.path)}.zip`);\n            const writer = stream.getWriter();\n            const zip = new Zip((err, data, final) => {\n                writer.write(data);\n                if (final) {\n                    writer.close();\n                }\n            });\n            for (const item of this.selectedItems) {\n                switch (item.type) {\n                    case LinuxFileType.Directory:\n                        await this.addDirectory(\n                            sync,\n                            zip,\n                            this.path,\n                            item.name,\n                        );\n                        break;\n                    case LinuxFileType.File:\n                        await this.addFile(sync, zip, this.path, item.name);\n                        break;\n                }\n            }\n            zip.end();\n        } catch (e: any) {\n            GLOBAL_STATE.showErrorDialog(e);\n        } finally {\n            sync.dispose();\n        }\n    }\n\n    pushPathQuery = (path: string) => {\n        Router.push({ query: { ...Router.query, path } });\n    };\n\n    changeDirectory(path: string) {\n        if (this.path === path) {\n            return;\n        }\n\n        this.path = path;\n\n        if (!GLOBAL_STATE.adb) {\n            return;\n        }\n\n        this.loadFiles();\n    }\n\n    loadFiles = asyncEffect(async (signal) => {\n        const currentPath = this.path;\n\n        runInAction(() => (this.items = []));\n\n        if (!GLOBAL_STATE.adb) {\n            return;\n        }\n\n        runInAction(() => (this.loading = true));\n\n        const sync = await GLOBAL_STATE.adb.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntry[] = [];\n        const intervalId = setInterval(() => {\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => (this.items = items.slice()));\n        }, 1000);\n\n        try {\n            for await (const entry of sync.opendir(currentPath)) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (entry.name === \".\" || entry.name === \"..\") {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (\n                    !(await sync.isDirectory(\n                        path.resolve(currentPath, entry.name!),\n                    ))\n                ) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0n;\n                }\n\n                items.push(toListItem(entry));\n            }\n\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => (this.items = items));\n        } finally {\n            if (!signal.aborted) {\n                runInAction(() => (this.loading = false));\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    });\n\n    upload = async (file: File) => {\n        const sync = await GLOBAL_STATE.adb!.sync();\n        try {\n            const itemPath = path.resolve(this.path!, file.name);\n            runInAction(() => {\n                this.uploading = true;\n                this.uploadPath = file.name;\n                this.uploadedSize = 0;\n                this.uploadTotalSize = file.size;\n                this.debouncedUploadedSize = 0;\n                this.uploadSpeed = 0;\n            });\n\n            const intervalId = setInterval(\n                action(() => {\n                    this.uploadSpeed =\n                        this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                }),\n                1000,\n            );\n\n            try {\n                const start = Date.now();\n\n                await sync.write({\n                    filename: itemPath,\n                    file: createFileStream(file)\n                        .pipeThrough(new WrapConsumableStream())\n                        .pipeThrough(\n                            new ProgressStream(\n                                action((uploaded) => {\n                                    this.uploadedSize = uploaded;\n                                }),\n                            ),\n                        ),\n                    type: LinuxFileType.File,\n                    permission: 0o666,\n                    mtime: file.lastModified / 1000,\n                });\n\n                console.log(\n                    \"Upload speed:\",\n                    (\n                        ((file.size / (Date.now() - start)) * 1000) /\n                        1024 /\n                        1024\n                    ).toFixed(2),\n                    \"MB/s\",\n                );\n\n                runInAction(() => {\n                    this.uploadSpeed =\n                        this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n        } catch (e: any) {\n            GLOBAL_STATE.showErrorDialog(e);\n        } finally {\n            sync.dispose();\n            this.loadFiles();\n            runInAction(() => {\n                this.uploading = false;\n            });\n        }\n    };\n}\n\nconst state = new FileManagerState();\n\nconst UploadDialog = observer(() => {\n    return (\n        <Dialog\n            hidden={!state.uploading}\n            dialogContentProps={{\n                title: \"Uploading...\",\n                subText: state.uploadPath,\n            }}\n        >\n            <ProgressIndicator\n                description={formatSpeed(\n                    state.debouncedUploadedSize,\n                    state.uploadTotalSize,\n                    state.uploadSpeed,\n                )}\n                percentComplete={state.uploadedSize / state.uploadTotalSize}\n            />\n        </Dialog>\n    );\n});\n\nconst FileManager: NextPage = (): JSX.Element | null => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    }, []);\n\n    const router = useRouter();\n    useEffect(() => {\n        let pathQuery = router.query.path;\n        if (!pathQuery) {\n            router.replace({ query: { ...router.query, path: state.path } });\n            return;\n        }\n\n        if (Array.isArray(pathQuery)) {\n            pathQuery = pathQuery[0];\n        }\n\n        state.changeDirectory(pathQuery);\n    }, [router]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await GLOBAL_STATE.adb!.sync();\n        try {\n            const readable = sync.read(path);\n            // @ts-ignore ReadableStream definitions are slightly incompatible\n            const response = new Response(readable);\n            const blob = await response.blob();\n            const url = globalThis.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, []);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback(\n        (item: AdbSyncEntry) => {\n            switch (item.type) {\n                case LinuxFileType.Link:\n                case LinuxFileType.Directory:\n                    state.pushPathQuery(path.resolve(state.path!, item.name!));\n                    break;\n                case LinuxFileType.File:\n                    switch (path.extname(item.name!)) {\n                        case \".jpg\":\n                        case \".png\":\n                        case \".svg\":\n                        case \".gif\":\n                            previewImage(path.resolve(state.path!, item.name!));\n                            break;\n                    }\n                    break;\n            }\n        },\n        [previewImage],\n    );\n\n    const selection = useConst(\n        () =>\n            new Selection({\n                onSelectionChanged() {\n                    runInAction(() => {\n                        state.selectedItems =\n                            selection.getSelection() as ListItem[];\n                    });\n                },\n            }),\n    );\n\n    const showContextMenu = useCallback(\n        (item?: AdbSyncEntry, index?: number, e?: Event) => {\n            if (!e) {\n                return false;\n            }\n\n            if (state.menuItems.length) {\n                runInAction(() => {\n                    state.contextMenuTarget = e as MouseEvent;\n                });\n            }\n\n            return false;\n        },\n        [],\n    );\n    const hideContextMenu = useCallback(() => {\n        runInAction(() => (state.contextMenuTarget = undefined));\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>File Manager</title>\n            </Head>\n\n            <CommandBar items={state.menuItems} />\n\n            <Breadcrumb items={state.breadcrumbItems} />\n\n            <StackItem\n                grow\n                styles={{\n                    root: {\n                        margin: \"-8px -16px -16px -16px\",\n                        padding: \"8px 16px 16px 16px\",\n                        overflowY: \"auto\",\n                    },\n                }}\n            >\n                <MarqueeSelection selection={selection}>\n                    <ShimmeredDetailsList\n                        items={state.sortedList}\n                        columns={state.columns}\n                        setKey={state.path}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={\n                            state.loading && state.items.length === 0\n                        }\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                        useReducedRowRenderer\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div\n                                style={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}\n                            >\n                                {/* eslint-disable-next-line @next/next/no-img-element */}\n                                <img\n                                    src={previewUrl}\n                                    alt=\"\"\n                                    style={{\n                                        maxWidth: \"100%\",\n                                        maxHeight: \"100%\",\n                                    }}\n                                />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n            </StackItem>\n\n            <NoSsr>\n                <ContextualMenu\n                    items={state.menuItems}\n                    hidden={!state.contextMenuTarget}\n                    directionalHint={DirectionalHint.bottomLeftEdge}\n                    target={state.contextMenuTarget}\n                    onDismiss={hideContextMenu}\n                    contextualMenuItemAs={(props) => (\n                        <ContextualMenuItem {...props} hasIcons={false} />\n                    )}\n                />\n            </NoSsr>\n\n            <UploadDialog />\n        </Stack>\n    );\n};\n\nexport default observer(FileManager);\n"],"names":["toListItem","item","key","name","initializeFileTypeIcons","classNames","mergeStyleSets","cursor","textDecoration","renderDetailsHeader","props","defaultRender","styles","concatStyleSets","root","paddingTop","compareCaseInsensitively","a","b","result","toLocaleLowerCase","localeCompare","state","breadcrumbItems","part","list","path","split","filter","Boolean","map","segment","text","onClick","e","pushPathQuery","unshift","length","isCurrentItem","menuItems","selectedItems","push","iconProps","iconName","Icons","CloudArrowUp","style","height","fontSize","lineHeight","disabled","GLOBAL_STATE","adb","files","pickFile","multiple","i","file","upload","CloudArrowDown","download","Delete","output","rm","showErrorDialog","loadFiles","sortedList","items","slice","sort","aIsFile","type","LinuxFileType","File","bIsFile","aSortKey","sortKey","bSortKey","sortDescending","columns","Document20","isIconOnly","minWidth","maxWidth","isCollapsible","onRender","Link","Directory","getFileTypeIconProps","FileIconType","folder","extension","genericFile","iconSrc","_fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__","q7","code","src","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Icon","imageProps","crossOrigin","width","isRowHeader","span","className","data-selection-invoke","concat","mode","toString","formatSize","Number","size","Date","mtime","toLocaleString","supportsFeature","AdbFeature","ListV2","ctime","atime","onColumnClick","column","runInAction","isSorted","isSortedDescending","getFileStream","sync","basePath","read","addDirectory","zip","relativePath","ZipPassThrough","add","EMPTY_UINT8_ARRAY","entry","readdir","addFile","pipeTo","WritableStream","write","chunk","close","stream","saveFile","writer","getWriter","Zip","err","data","final","end","dispose","changeDirectory","constructor","initial","visible","loading","uploading","uploadPath","undefined","uploadedSize","uploadTotalSize","debouncedUploadedSize","uploadSpeed","contextMenuTarget","Router","query","asyncEffect","signal","currentPath","linkItems","intervalId","setInterval","aborted","opendir","isDirectory","_yume_chan_adb__WEBPACK_IMPORTED_MODULE_2__","permission","clearInterval","itemPath","action","start","now","filename","createFileStream","pipeThrough","WrapConsumableStream","ProgressStream","uploaded","lastModified","console","log","toFixed","makeAutoObservable","observable","shallow","bound","autorun","UploadDialog","observer","Dialog","hidden","dialogContentProps","title","subText","ProgressIndicator","description","formatSpeed","percentComplete","__webpack_exports__","useEffect","router","useRouter","pathQuery","replace","Array","isArray","previewUrl","setPreviewUrl","useState","previewImage","useCallback","readable","response","Response","blob","url","globalThis","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","onSelectionChanged","getSelection","showContextMenu","index","hideContextMenu","jsxs","Stack","RouteStackProps","Head","CommandBar","Breadcrumb","StackItem","grow","margin","padding","overflowY","MarqueeSelection","ShimmeredDetailsList","setKey","layoutMode","DetailsListLayoutMode","justified","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","useReducedRowRenderer","Layer","Overlay","div","display","alignItems","justifyContent","img","alt","maxHeight","NoSsr","ContextualMenu","directionalHint","DirectionalHint","bottomLeftEdge","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons"],"sourceRoot":""}