{"version":3,"file":"static/chunks/133-1e98d4439c0437dd.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/.pnpm/@yume-chan+adb-daemon-webusb@0.0.21/node_modules/@yume-chan/adb-daemon-webusb/src/utils.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+adb-daemon-webusb@0.0.21/node_modules/@yume-chan/adb-daemon-webusb/src/device.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+adb-daemon-webusb@0.0.21/node_modules/@yume-chan/adb-daemon-webusb/src/manager.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+adb-daemon-webusb@0.0.21/node_modules/@yume-chan/adb-daemon-webusb/src/index.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/type.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/audio.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/filter.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/hid.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/initialize.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/keyboard.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/mouse.ts","webpack://_N_E/../../node_modules/.pnpm/@yume-chan+aoa@0.0.21/node_modules/@yume-chan/aoa/src/index.ts","webpack://_N_E/<anon>"],"sourcesContent":["export function isErrorName(e: unknown, name: string): boolean {\n    // node-usb package doesn't use `DOMException`,\n    // so use a looser check\n    // https://github.com/node-usb/node-usb/issues/573\n    return (\n        typeof e === \"object\" && e !== null && \"name\" in e && e.name === name\n    );\n}\n\n/**\n * `classCode`, `subclassCode` and `protocolCode` are required\n * for selecting correct USB configuration and interface.\n */\nexport type AdbDeviceFilter = USBDeviceFilter &\n    Required<\n        Pick<USBDeviceFilter, \"classCode\" | \"subclassCode\" | \"protocolCode\">\n    >;\n\nfunction alternateMatchesFilter(\n    alternate: USBAlternateInterface,\n    filters: AdbDeviceFilter[],\n) {\n    return filters.some(\n        (filter) =>\n            alternate.interfaceClass === filter.classCode &&\n            alternate.interfaceSubclass === filter.subclassCode &&\n            alternate.interfaceProtocol === filter.protocolCode,\n    );\n}\n\nexport function findUsbAlternateInterface(\n    device: USBDevice,\n    filters: AdbDeviceFilter[],\n) {\n    for (const configuration of device.configurations) {\n        for (const interface_ of configuration.interfaces) {\n            for (const alternate of interface_.alternates) {\n                if (alternateMatchesFilter(alternate, filters)) {\n                    return { configuration, interface_, alternate };\n                }\n            }\n        }\n    }\n\n    throw new Error(\"No matched alternate interface found\");\n}\n","import type {\n    AdbDaemonDevice,\n    AdbPacketData,\n    AdbPacketInit,\n} from \"@yume-chan/adb\";\nimport {\n    AdbPacketHeader,\n    AdbPacketSerializeStream,\n    unreachable,\n} from \"@yume-chan/adb\";\nimport type {\n    Consumable,\n    ReadableWritablePair,\n    WritableStream,\n} from \"@yume-chan/stream-extra\";\nimport {\n    ConsumableWritableStream,\n    DuplexStreamFactory,\n    ReadableStream,\n    pipeFrom,\n} from \"@yume-chan/stream-extra\";\nimport type { ExactReadable } from \"@yume-chan/struct\";\nimport { EMPTY_UINT8_ARRAY } from \"@yume-chan/struct\";\n\nimport type { AdbDeviceFilter } from \"./utils.js\";\nimport { findUsbAlternateInterface, isErrorName } from \"./utils.js\";\n\n/**\n * The default filter for ADB devices, as defined by Google.\n */\nexport const ADB_DEFAULT_DEVICE_FILTER = {\n    classCode: 0xff,\n    subclassCode: 0x42,\n    protocolCode: 1,\n} as const satisfies AdbDeviceFilter;\n\n/**\n * Find the first pair of input and output endpoints from an alternate interface.\n *\n * ADB interface only has two endpoints, one for input and one for output.\n */\nfunction findUsbEndpoints(endpoints: USBEndpoint[]) {\n    if (endpoints.length === 0) {\n        throw new Error(\"No endpoints given\");\n    }\n\n    let inEndpoint: USBEndpoint | undefined;\n    let outEndpoint: USBEndpoint | undefined;\n\n    for (const endpoint of endpoints) {\n        switch (endpoint.direction) {\n            case \"in\":\n                inEndpoint = endpoint;\n                if (outEndpoint) {\n                    return { inEndpoint, outEndpoint };\n                }\n                break;\n            case \"out\":\n                outEndpoint = endpoint;\n                if (inEndpoint) {\n                    return { inEndpoint, outEndpoint };\n                }\n                break;\n        }\n    }\n\n    if (!inEndpoint) {\n        throw new Error(\"No input endpoint found.\");\n    }\n    if (!outEndpoint) {\n        throw new Error(\"No output endpoint found.\");\n    }\n    throw new Error(\"unreachable\");\n}\n\nclass Uint8ArrayExactReadable implements ExactReadable {\n    #data: Uint8Array;\n    #position: number;\n\n    get position() {\n        return this.#position;\n    }\n\n    constructor(data: Uint8Array) {\n        this.#data = data;\n        this.#position = 0;\n    }\n\n    readExactly(length: number): Uint8Array {\n        const result = this.#data.subarray(\n            this.#position,\n            this.#position + length,\n        );\n        this.#position += length;\n        return result;\n    }\n}\n\nexport class AdbDaemonWebUsbConnection\n    implements ReadableWritablePair<AdbPacketData, Consumable<AdbPacketInit>>\n{\n    #readable: ReadableStream<AdbPacketData>;\n    get readable() {\n        return this.#readable;\n    }\n\n    #writable: WritableStream<Consumable<AdbPacketInit>>;\n    get writable() {\n        return this.#writable;\n    }\n\n    constructor(\n        device: USBDevice,\n        inEndpoint: USBEndpoint,\n        outEndpoint: USBEndpoint,\n        usbManager: USB,\n    ) {\n        let closed = false;\n\n        const duplex = new DuplexStreamFactory<\n            AdbPacketData,\n            Consumable<Uint8Array>\n        >({\n            close: async () => {\n                try {\n                    closed = true;\n                    await device.close();\n                } catch {\n                    /* device may have already disconnected */\n                }\n            },\n            dispose: () => {\n                closed = true;\n                usbManager.removeEventListener(\n                    \"disconnect\",\n                    handleUsbDisconnect,\n                );\n            },\n        });\n\n        function handleUsbDisconnect(e: USBConnectionEvent) {\n            if (e.device === device) {\n                duplex.dispose().catch(unreachable);\n            }\n        }\n\n        usbManager.addEventListener(\"disconnect\", handleUsbDisconnect);\n\n        this.#readable = duplex.wrapReadable(\n            new ReadableStream<AdbPacketData>({\n                async pull(controller) {\n                    try {\n                        // The `length` argument in `transferIn` must not be smaller than what the device sent,\n                        // otherwise it will return `babble` status without any data.\n                        // ADB daemon sends each packet in two parts, the 24-byte header and the payload.\n                        const result = await device.transferIn(\n                            inEndpoint.endpointNumber,\n                            24,\n                        );\n\n                        // TODO: webusb: handle `babble` by discarding the data and receive again\n\n                        // Per spec, the `result.data` always covers the whole `buffer`.\n                        const buffer = new Uint8Array(result.data!.buffer);\n                        const stream = new Uint8ArrayExactReadable(buffer);\n\n                        // Add `payload` field to its type, it's assigned below.\n                        const packet = AdbPacketHeader.deserialize(\n                            stream,\n                        ) as AdbPacketHeader & { payload: Uint8Array };\n                        if (packet.payloadLength !== 0) {\n                            const result = await device.transferIn(\n                                inEndpoint.endpointNumber,\n                                packet.payloadLength,\n                            );\n                            packet.payload = new Uint8Array(\n                                result.data!.buffer,\n                            );\n                        } else {\n                            packet.payload = EMPTY_UINT8_ARRAY;\n                        }\n\n                        controller.enqueue(packet);\n                    } catch (e) {\n                        // On Windows, disconnecting the device will cause `NetworkError` to be thrown,\n                        // even before the `disconnect` event is fired.\n                        // We need to wait a little bit and check if the device is still connected.\n                        // https://github.com/WICG/webusb/issues/219\n                        if (isErrorName(e, \"NetworkError\")) {\n                            await new Promise<void>((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                }, 100);\n                            });\n\n                            if (closed) {\n                                controller.close();\n                            } else {\n                                throw e;\n                            }\n                        }\n\n                        throw e;\n                    }\n                },\n            }),\n        );\n\n        const zeroMask = outEndpoint.packetSize - 1;\n        this.#writable = pipeFrom(\n            duplex.createWritable(\n                new ConsumableWritableStream({\n                    write: async (chunk) => {\n                        try {\n                            await device.transferOut(\n                                outEndpoint.endpointNumber,\n                                chunk,\n                            );\n\n                            // In USB protocol, a not-full packet indicates the end of a transfer.\n                            // If the payload size is a multiple of the packet size,\n                            // we need to send an empty packet to indicate the end,\n                            // so the OS will send it to the device immediately.\n                            if (\n                                zeroMask &&\n                                (chunk.byteLength & zeroMask) === 0\n                            ) {\n                                await device.transferOut(\n                                    outEndpoint.endpointNumber,\n                                    EMPTY_UINT8_ARRAY,\n                                );\n                            }\n                        } catch (e) {\n                            if (closed) {\n                                return;\n                            }\n                            throw e;\n                        }\n                    },\n                }),\n            ),\n            new AdbPacketSerializeStream(),\n        );\n    }\n}\n\nexport class AdbDaemonWebUsbDevice implements AdbDaemonDevice {\n    #filters: AdbDeviceFilter[];\n    #usbManager: USB;\n\n    #raw: USBDevice;\n    get raw() {\n        return this.#raw;\n    }\n\n    get serial(): string {\n        return this.#raw.serialNumber!;\n    }\n\n    get name(): string {\n        return this.#raw.productName!;\n    }\n\n    /**\n     * Create a new instance of `AdbDaemonWebUsbConnection` using a specified `USBDevice` instance\n     *\n     * @param device The `USBDevice` instance obtained elsewhere.\n     * @param filters The filters to use when searching for ADB interface. Defaults to {@link ADB_DEFAULT_DEVICE_FILTER}.\n     */\n    constructor(\n        device: USBDevice,\n        filters: AdbDeviceFilter[] = [ADB_DEFAULT_DEVICE_FILTER],\n        usbManager: USB,\n    ) {\n        this.#raw = device;\n        this.#filters = filters;\n        this.#usbManager = usbManager;\n    }\n\n    /**\n     * Claim the device and create a pair of `AdbPacket` streams to the ADB interface.\n     * @returns The pair of `AdbPacket` streams.\n     */\n    async connect(): Promise<\n        ReadableWritablePair<AdbPacketData, Consumable<AdbPacketInit>>\n    > {\n        if (!this.#raw.opened) {\n            await this.#raw.open();\n        }\n\n        const { configuration, interface_, alternate } =\n            findUsbAlternateInterface(this.#raw, this.#filters);\n\n        if (\n            this.#raw.configuration?.configurationValue !==\n            configuration.configurationValue\n        ) {\n            // Note: Switching configuration is not supported on Windows,\n            // but Android devices should always expose ADB function at the first (default) configuration.\n            await this.#raw.selectConfiguration(\n                configuration.configurationValue,\n            );\n        }\n\n        if (!interface_.claimed) {\n            await this.#raw.claimInterface(interface_.interfaceNumber);\n        }\n\n        if (\n            interface_.alternate.alternateSetting !== alternate.alternateSetting\n        ) {\n            await this.#raw.selectAlternateInterface(\n                interface_.interfaceNumber,\n                alternate.alternateSetting,\n            );\n        }\n\n        const { inEndpoint, outEndpoint } = findUsbEndpoints(\n            alternate.endpoints,\n        );\n        return new AdbDaemonWebUsbConnection(\n            this.#raw,\n            inEndpoint,\n            outEndpoint,\n            this.#usbManager,\n        );\n    }\n}\n","import { ADB_DEFAULT_DEVICE_FILTER, AdbDaemonWebUsbDevice } from \"./device.js\";\nimport type { AdbDeviceFilter } from \"./utils.js\";\nimport { findUsbAlternateInterface, isErrorName } from \"./utils.js\";\n\nexport class AdbDaemonWebUsbDeviceManager {\n    /**\n     * Gets the instance of {@link AdbDaemonWebUsbDeviceManager} using browser WebUSB implementation.\n     *\n     * May be `undefined` if current runtime does not support WebUSB.\n     */\n    static readonly BROWSER =\n        typeof globalThis.navigator !== \"undefined\" &&\n        !!globalThis.navigator.usb\n            ? new AdbDaemonWebUsbDeviceManager(globalThis.navigator.usb)\n            : undefined;\n\n    #usbManager: USB;\n\n    /**\n     * Create a new instance of {@link AdbDaemonWebUsbDeviceManager} using the specified WebUSB implementation.\n     * @param usbManager A WebUSB compatible interface.\n     */\n    constructor(usbManager: USB) {\n        this.#usbManager = usbManager;\n    }\n\n    /**\n     * Request access to a connected device.\n     * This is a convince method for `usb.requestDevice()`.\n     * @param filters\n     * The filters to apply to the device list.\n     *\n     * It must have `classCode`, `subclassCode` and `protocolCode` fields for selecting the ADB interface,\n     * but might also have `vendorId`, `productId` or `serialNumber` fields to limit the displayed device list.\n     *\n     * Defaults to {@link ADB_DEFAULT_DEVICE_FILTER}.\n     * @returns An {@link AdbDaemonWebUsbDevice} instance if the user selected a device,\n     * or `undefined` if the user cancelled the device picker.\n     */\n    async requestDevice(\n        filters: AdbDeviceFilter[] = [ADB_DEFAULT_DEVICE_FILTER],\n    ): Promise<AdbDaemonWebUsbDevice | undefined> {\n        if (filters.length === 0) {\n            throw new TypeError(\"filters must not be empty\");\n        }\n\n        try {\n            const device = await this.#usbManager.requestDevice({\n                filters,\n            });\n            return new AdbDaemonWebUsbDevice(device, filters, this.#usbManager);\n        } catch (e) {\n            // No device selected\n            if (isErrorName(e, \"NotFoundError\")) {\n                return undefined;\n            }\n\n            throw e;\n        }\n    }\n\n    /**\n     * Get all connected and authenticated devices.\n     * This is a convince method for `usb.getDevices()`.\n     * @param filters\n     * The filters to apply to the device list.\n     *\n     * It must have `classCode`, `subclassCode` and `protocolCode` fields for selecting the ADB interface,\n     * but might also have `vendorId`, `productId` or `serialNumber` fields to limit the device list.\n     *\n     * Defaults to {@link ADB_DEFAULT_DEVICE_FILTER}.\n     * @returns An array of {@link AdbDaemonWebUsbDevice} instances for all connected and authenticated devices.\n     */\n    async getDevices(\n        filters: AdbDeviceFilter[] = [ADB_DEFAULT_DEVICE_FILTER],\n    ): Promise<AdbDaemonWebUsbDevice[]> {\n        if (filters.length === 0) {\n            throw new TypeError(\"filters must not be empty\");\n        }\n\n        const devices = await this.#usbManager.getDevices();\n        return devices\n            .filter((device) => {\n                for (const filter of filters) {\n                    if (\n                        \"vendorId\" in filter &&\n                        device.vendorId !== filter.vendorId\n                    ) {\n                        continue;\n                    }\n                    if (\n                        \"productId\" in filter &&\n                        device.productId !== filter.productId\n                    ) {\n                        continue;\n                    }\n                    if (\n                        \"serialNumber\" in filter &&\n                        device.serialNumber !== filter.serialNumber\n                    ) {\n                        continue;\n                    }\n\n                    try {\n                        findUsbAlternateInterface(device, filters);\n                        return true;\n                    } catch {\n                        continue;\n                    }\n                }\n                return false;\n            })\n            .map(\n                (device) =>\n                    new AdbDaemonWebUsbDevice(\n                        device,\n                        filters,\n                        this.#usbManager,\n                    ),\n            );\n    }\n}\n","export * from \"./device.js\";\nexport * from \"./manager.js\";\nexport * from \"./utils.js\";\nexport * from \"./watcher.js\";\n","export enum AoaRequestType {\n    GetProtocol = 51,\n    SendString,\n    Start,\n    RegisterHid,\n    UnregisterHid,\n    SetHidReportDescriptor,\n    SendHidEvent,\n    SetAudioMode,\n}\n","import { AoaRequestType } from \"./type.js\";\n\n// The original plan is to add more audio modes,\n// but AOA audio accessory mode is soon deprecated in Android 8.\nexport enum AoaAudioMode {\n    Off,\n    /**\n     * 2 channel, 16 bit, 44.1KHz PCM\n     */\n    On,\n}\n\n/**\n * Sets the audio mode. This method must be called before {@link aoaStartAccessory}.\n *\n * AOA audio accessory mode turns the Android device into a USB microphone,\n * all system audio will be directed to the microphone, to be capture by the USB host.\n *\n * It's like connecting a audio cable between the Android headphone jack and PC microphone jack,\n * except all signals are digital.\n *\n * Audio mode is deprecated in Android 8. On Android 9 and later, this call still switches the device\n * to audio accessory mode, and the device will be recognized as a USB microphone, but the\n * required USB endpoint is not presented anymore.\n * @param device The Android device.\n * @param mode The audio mode.\n */\nexport async function aoaSetAudioMode(device: USBDevice, mode: AoaAudioMode) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.SetAudioMode,\n            value: mode,\n            index: 0,\n        },\n        new ArrayBuffer(0)\n    );\n}\n\nfunction findAudioStreamingInterface(device: USBDevice) {\n    for (const configuration of device.configurations) {\n        for (const interface_ of configuration.interfaces) {\n            for (const alternate of interface_.alternates) {\n                // Audio\n                if (alternate.interfaceClass !== 0x01) {\n                    continue;\n                }\n                // AudioStreaming\n                if (alternate.interfaceSubclass !== 0x02) {\n                    continue;\n                }\n                if (alternate.endpoints.length === 0) {\n                    continue;\n                }\n                return { configuration, interface_, alternate };\n            }\n        }\n    }\n\n    throw new Error(\"No matched alternate interface found\");\n}\n\n/**\n * It doesn't work on Web, because Chrome blocked audio devices from WebUSB API.\n * @param device The Android device.\n * @returns A readable stream of raw audio data.\n */\nexport function aoaGetAudioStream(device: USBDevice) {\n    let endpointNumber!: number;\n    return new ReadableStream<Uint8Array>({\n        async start() {\n            const { configuration, interface_, alternate } =\n                findAudioStreamingInterface(device);\n\n            if (\n                device.configuration?.configurationValue !==\n                configuration.configurationValue\n            ) {\n                await device.selectConfiguration(\n                    configuration.configurationValue\n                );\n            }\n\n            if (!interface_.claimed) {\n                await device.claimInterface(interface_.interfaceNumber);\n            }\n\n            if (\n                interface_.alternate.alternateSetting !==\n                alternate.alternateSetting\n            ) {\n                await device.selectAlternateInterface(\n                    interface_.interfaceNumber,\n                    alternate.alternateSetting\n                );\n            }\n\n            const endpoint = alternate.endpoints.find(\n                (endpoint) =>\n                    endpoint.type === \"isochronous\" &&\n                    endpoint.direction === \"in\"\n            );\n            if (!endpoint) {\n                throw new Error(\"No matched endpoint found\");\n            }\n\n            endpointNumber = endpoint.endpointNumber;\n        },\n        async pull(controller) {\n            const result = await device.isochronousTransferIn(endpointNumber, [\n                1024,\n            ]);\n            for (const packet of result.packets) {\n                const data = packet.data!;\n                const array = new Uint8Array(\n                    data.buffer,\n                    data.byteOffset,\n                    data.byteLength\n                );\n                controller.enqueue(array);\n            }\n        },\n    });\n}\n","export const AOA_DEFAULT_DEVICE_FILTERS = [\n    {\n        vendorId: 0x18d1,\n        // accessory\n        productId: 0x2d00,\n    },\n    {\n        vendorId: 0x18d1,\n        // accessory + adb\n        productId: 0x2d01,\n    },\n] as const satisfies readonly USBDeviceFilter[];\n","import { AoaRequestType } from \"./type.js\";\n\nexport async function aoaHidRegister(\n    device: USBDevice,\n    accessoryId: number,\n    reportDescriptorSize: number\n) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.RegisterHid,\n            value: accessoryId,\n            index: reportDescriptorSize,\n        },\n        new ArrayBuffer(0)\n    );\n}\n\nexport async function aoaHidSetReportDescriptor(\n    device: USBDevice,\n    accessoryId: number,\n    reportDescriptor: Uint8Array\n) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.SetHidReportDescriptor,\n            value: accessoryId,\n            index: 0,\n        },\n        reportDescriptor\n    );\n}\n\nexport async function aoaHidUnregister(device: USBDevice, accessoryId: number) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.UnregisterHid,\n            value: accessoryId,\n            index: 0,\n        },\n        new ArrayBuffer(0)\n    );\n}\n\nexport async function aoaHidSendInputReport(\n    device: USBDevice,\n    accessoryId: number,\n    event: Uint8Array\n) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.SendHidEvent,\n            value: accessoryId,\n            index: 0,\n        },\n        event\n    );\n}\n\n/**\n * Emulate a HID device over AOA protocol.\n *\n * It can only send input reports, but not send feature reports nor receive output reports.\n */\nexport class AoaHidDevice {\n    /**\n     * Register a HID device.\n     * @param device The Android device.\n     * @param accessoryId An arbitrary number to uniquely identify the HID device.\n     * @param reportDescriptor The HID report descriptor.\n     * @returns An instance of AoaHidDevice to send events.\n     */\n    static async register(\n        device: USBDevice,\n        accessoryId: number,\n        reportDescriptor: Uint8Array\n    ) {\n        await aoaHidRegister(device, accessoryId, reportDescriptor.length);\n        await aoaHidSetReportDescriptor(device, accessoryId, reportDescriptor);\n        return new AoaHidDevice(device, accessoryId);\n    }\n\n    #device: USBDevice;\n    #accessoryId: number;\n\n    constructor(device: USBDevice, accessoryId: number) {\n        this.#device = device;\n        this.#accessoryId = accessoryId;\n    }\n\n    async sendInputReport(event: Uint8Array) {\n        await aoaHidSendInputReport(this.#device, this.#accessoryId, event);\n    }\n\n    async unregister() {\n        await aoaHidUnregister(this.#device, this.#accessoryId);\n    }\n}\n","import { AoaRequestType } from \"./type.js\";\n\nexport async function aoaGetProtocol(device: USBDevice) {\n    const result = await device.controlTransferIn(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.GetProtocol,\n            value: 0,\n            index: 0,\n        },\n        2\n    );\n    const version = result.data!.getUint16(0, true);\n    return version;\n}\n\n/**\n * The device will reset (disconnect) after this call.\n * @param device The Android device.\n */\nexport async function aoaStartAccessory(device: USBDevice) {\n    await device.controlTransferOut(\n        {\n            recipient: \"device\",\n            requestType: \"vendor\",\n            request: AoaRequestType.Start,\n            value: 0,\n            index: 0,\n        },\n        new ArrayBuffer(0)\n    );\n}\n","// cspell:ignore Oper\n\n// Most names follow Web API `KeyboardEvent.code`,\nexport enum HidKeyCode {\n    KeyA = 4,\n    KeyB,\n    KeyC,\n    KeyD,\n    KeyE,\n    KeyF,\n    KeyG,\n    KeyH,\n    KeyI,\n    KeyJ,\n    KeyK,\n    KeyL,\n    KeyM,\n    KeyN,\n    KeyO,\n    KeyP,\n    KeyQ,\n    KeyR,\n    KeyS,\n    KeyT,\n    KeyU,\n    KeyV,\n    KeyW,\n    KeyX,\n    KeyY,\n    KeyZ,\n    Digit1,\n    Digit2,\n    Digit3,\n    Digit4,\n    Digit5,\n    Digit6,\n    Digit7,\n    Digit8,\n    Digit9,\n    Digit0,\n    Enter,\n    Escape,\n    Backspace,\n    Tab,\n    Space,\n    Minus,\n    Equal,\n    BracketLeft,\n    BracketRight,\n    Backslash,\n    NonUsHash,\n    Semicolon,\n    Quote,\n    Backquote,\n    Comma,\n    Period,\n    Slash,\n    CapsLock,\n    F1,\n    F2,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    F10,\n    F11,\n    F12,\n    PrintScreen,\n    ScrollLock,\n    Pause,\n    Insert,\n    Home,\n    PageUp,\n    Delete,\n    End,\n    PageDown,\n    ArrowRight,\n    ArrowLeft,\n    ArrowDown,\n    ArrowUp,\n    NumLock,\n    NumpadDivide,\n    NumpadMultiply,\n    NumpadSubtract,\n    NumpadAdd,\n    NumpadEnter,\n    Numpad1,\n    Numpad2,\n    Numpad3,\n    Numpad4,\n    Numpad5,\n    Numpad6,\n    Numpad7,\n    Numpad8,\n    Numpad9,\n    Numpad0,\n    NumpadDecimal,\n    NonUsBackslash,\n    ContextMenu,\n    Power,\n    NumpadEqual,\n    F13,\n    F14,\n    F15,\n    F16,\n    F17,\n    F18,\n    F19,\n    F20,\n    F21,\n    F22,\n    F23,\n    F24,\n\n    Execute,\n    Help,\n    Menu,\n    Select,\n    Stop,\n    Again,\n    Undo,\n    Cut,\n    Copy,\n    Paste,\n    Find,\n    Mute,\n    VolumeUp,\n    VolumeDown,\n    LockingCapsLock,\n    LockingNumLock,\n    LockingScrollLock,\n    NumpadComma,\n    KeypadEqualSign,\n    International1,\n    International2,\n    International3,\n    International4,\n    International5,\n    International6,\n    International7,\n    International8,\n    International9,\n    Lang1,\n    Lang2,\n    Lang3,\n    Lang4,\n    Lang5,\n    Lang6,\n    Lang7,\n    Lang8,\n    Lang9,\n    AlternateErase,\n    SysReq,\n    Cancel,\n    Clear,\n    Prior,\n    Return2,\n    Separator,\n    Out,\n    Oper,\n    ClearAgain,\n    CrSel,\n    ExSel,\n\n    Keypad00 = 0xb0,\n    Keypad000,\n    ThousandsSeparator,\n    DecimalSeparator,\n    CurrencyUnit,\n    CurrencySubUnit,\n    KeypadLeftParen,\n    KeypadRightParen,\n    KeypadLeftBrace,\n    KeypadRightBrace,\n    KeypadTab,\n    KeypadBackspace,\n    KeypadA,\n    KeypadB,\n    KeypadC,\n    KeypadD,\n    KeypadE,\n    KeypadF,\n    KeypadXor,\n    KeypadPower,\n    KeypadPercent,\n    KeypadLess,\n    KeypadGreater,\n    KeypadAmpersand,\n    KeypadDblAmpersand,\n    KeypadVerticalBar,\n    KeypadDblVerticalBar,\n    KeypadColon,\n    KeypadHash,\n    KeypadSpace,\n    KeypadAt,\n    KeypadExclamation,\n    KeypadMemStore,\n    KeypadMemRecall,\n    KeypadMemClear,\n    KeypadMemAdd,\n    KeypadMemSubtract,\n    KeypadMemMultiply,\n    KeypadMemDivide,\n    KeypadPlusMinus,\n    KeypadClear,\n    KeypadClearEntry,\n    KeypadBinary,\n    KeypadOctal,\n    KeypadDecimal,\n    KeypadHexadecimal,\n\n    ControlLeft = 0xe0,\n    ShiftLeft,\n    AltLeft,\n    MetaLeft,\n    ControlRight,\n    ShiftRight,\n    AltRight,\n    MetaRight,\n}\n\nexport class HidKeyboard {\n    /**\n     * A HID Keyboard Report Descriptor.\n     *\n     * It's compatible with the legacy boot protocol. (1 byte modifier, 1 byte reserved, 6 bytes key codes).\n     * Technically it doesn't need to be compatible with the legacy boot protocol, but it's the most common implementation.\n     */\n    static readonly DESCRIPTOR = new Uint8Array(\n        // prettier-ignore\n        [\n            0x05, 0x01, // Usage Page (Generic Desktop)\n            0x09, 0x06, // Usage (Keyboard)\n            0xa1, 0x01, // Collection (Application)\n            0x05, 0x07, //    Usage Page (Keyboard)\n            0x19, 0xe0, //    Usage Minimum (Keyboard Left Control)\n            0x29, 0xe7, //    Usage Maximum (Keyboard Right GUI)\n            0x15, 0x00, //    Logical Minimum (0)\n            0x25, 0x01, //    Logical Maximum (1)\n            0x75, 0x01, //    Report Size (1)\n            0x95, 0x08, //    Report Count (8)\n            0x81, 0x02, //    Input (Data, Variable, Absolute)\n\n            0x75, 0x08, //    Report Size (8)\n            0x95, 0x01, //    Report Count (1)\n            0x81, 0x01, //    Input (Constant)\n\n            0x05, 0x08, //    Usage Page (LEDs)\n            0x19, 0x01, //    Usage Minimum (Num Lock)\n            0x29, 0x05, //    Usage Maximum (Kana)\n            0x75, 0x01, //    Report Size (1)\n            0x95, 0x05, //    Report Count (5)\n            0x91, 0x02, //    Output (Data, Variable, Absolute)\n\n            0x75, 0x03, //    Report Size (3)\n            0x95, 0x01, //    Report Count (1)\n            0x91, 0x01, //    Output (Constant)\n\n            0x05, 0x07, //    Usage Page (Keyboard)\n            0x19, 0x00, //    Usage Minimum (Reserved (no event indicated))\n            0x29, 0xdd, //    Usage Maximum (Keyboard Application)\n            0x15, 0x00, //    Logical Minimum (0)\n            0x25, 0xdd, //    Logical Maximum (221)\n            0x75, 0x08, //    Report Size (8)\n            0x95, 0x06, //    Report Count (6)\n            0x81, 0x00, //    Input (Data, Array)\n            0xc0        // End Collection\n        ]\n    );\n\n    #modifiers = 0;\n    #keys: Set<HidKeyCode> = new Set();\n\n    down(key: HidKeyCode) {\n        if (key >= HidKeyCode.ControlLeft && key <= HidKeyCode.MetaRight) {\n            this.#modifiers |= 1 << (key - HidKeyCode.ControlLeft);\n        } else {\n            this.#keys.add(key);\n        }\n    }\n\n    up(key: HidKeyCode) {\n        if (key >= HidKeyCode.ControlLeft && key <= HidKeyCode.MetaRight) {\n            this.#modifiers &= ~(1 << (key - HidKeyCode.ControlLeft));\n        } else {\n            this.#keys.delete(key);\n        }\n    }\n\n    reset() {\n        this.#modifiers = 0;\n        this.#keys.clear();\n    }\n\n    serializeInputReport() {\n        const buffer = new Uint8Array(8);\n        buffer[0] = this.#modifiers;\n        let i = 2;\n        for (const key of this.#keys) {\n            buffer[i] = key;\n            i += 1;\n            if (i >= 8) {\n                break;\n            }\n        }\n        return buffer;\n    }\n}\n","export class HidMouse {\n    static readonly descriptor = new Uint8Array(\n        // prettier-ignore\n        [\n            0x05, 0x01,       // Usage Page (Generic Desktop)\n            0x09, 0x02,       // Usage (Mouse)\n            0xa1, 0x01,       // Collection (Application)\n            0x09, 0x01,       //     Usage (Pointer)\n            0xa1, 0x00,       //     Collection (Physical)\n            0x05, 0x09,       //         Usage Page (Button)\n            0x19, 0x01,       //         Usage Minimum (Button 1)\n            0x29, 0x05,       //         Usage Maximum (Button 5)\n            0x15, 0x00,       //         Logical Minimum (0)\n            0x25, 0x01,       //         Logical Maximum (1)\n            0x75, 0x01,       //         Report Size (1)\n            0x95, 0x05,       //         Report Count (5)\n            0x81, 0x02,       //         Input (Data, Variable, Absolute)\n\n            0x75, 0x03,       //         Report Size (3)\n            0x95, 0x01,       //         Report Count (1)\n            0x81, 0x01,       //         Input (Constant)\n\n            0x05, 0x01,       //         Usage Page (Generic Desktop)\n            0x09, 0x30,       //         Usage (X)\n            0x09, 0x31,       //         Usage (Y)\n            0x09, 0x38,       //         Usage (Wheel)\n            0x15, 0x81,       //         Logical Minimum (-127)\n            0x25, 0x7f,       //         Logical Maximum (127)\n            0x75, 0x08,       //         Report Size (8)\n            0x95, 0x03,       //         Report Count (3)\n            0x81, 0x06,       //         Input (Data, Variable, Relative)\n\n            0x05, 0x0C,       //         Usage Page (Consumer)\n            0x0A, 0x38, 0x02, //         Usage (AC Pan)\n            0x15, 0x81,       //         Logical Minimum (-127)\n            0x25, 0x7f,       //         Logical Maximum (127)\n            0x75, 0x08,       //         Report Size (8)\n            0x95, 0x01,       //         Report Count (1)\n            0x81, 0x06,       //         Input (Data, Variable, Relative)\n            0xc0,             //     End Collection\n            0xc0,             // End Collection\n        ]\n    );\n\n    static serializeInputReport(\n        movementX: number,\n        movementY: number,\n        buttons: number,\n        scrollX: number,\n        scrollY: number\n    ): Uint8Array {\n        return new Uint8Array([\n            buttons,\n            movementX,\n            movementY,\n            scrollY,\n            scrollX,\n        ]);\n    }\n}\n","export * from \"./audio.js\";\nexport * from \"./filter.js\";\nexport * from \"./hid.js\";\nexport * from \"./initialize.js\";\nexport * from \"./keyboard.js\";\nexport * from \"./mouse.js\";\nexport * from \"./type.js\";\n"],"names":["isErrorName","e","name","findUsbAlternateInterface","device","filters","configuration","configurations","interface_","interfaces","alternate","alternates","alternateMatchesFilter","some","interfaceClass","filter","classCode","interfaceSubclass","subclassCode","interfaceProtocol","protocolCode","ADB_DEFAULT_DEVICE_FILTER","Uint8ArrayExactReadable","data","position","constructor","readExactly","length","result","subarray","AdbDaemonWebUsbConnection","readable","writable","inEndpoint","outEndpoint","usbManager","closed","duplex","stream_extra_esm","DuplexStreamFactory","close","dispose","removeEventListener","handleUsbDisconnect","catch","esm","unreachable","addEventListener","wrapReadable","ReadableStream","pull","controller","transferIn","endpointNumber","buffer","Uint8Array","stream","packet","AdbPacketHeader","deserialize","payloadLength","payload","struct_esm","RJ","enqueue","Promise","setTimeout","resolve","zeroMask","packetSize","pipeFrom","createWritable","ConsumableWritableStream","write","chunk","transferOut","byteLength","AdbPacketSerializeStream","AdbDaemonWebUsbDevice","raw","serial","serialNumber","productName","connect","opened","open","configurationValue","selectConfiguration","claimed","claimInterface","interfaceNumber","alternateSetting","selectAlternateInterface","findUsbEndpoints","endpoints","endpoint","direction","AdbDaemonWebUsbDeviceManager","BROWSER","globalThis","navigator","usb","undefined","requestDevice","getDevices","devices","vendorId","productId","map","AoaRequestType","AoaAudioMode","HidKeyCode","aoaSetAudioMode","mode","controlTransferOut","recipient","requestType","request","SetAudioMode","value","index","ArrayBuffer","aoaHidRegister","accessoryId","reportDescriptorSize","RegisterHid","aoaHidSetReportDescriptor","reportDescriptor","SetHidReportDescriptor","aoaHidUnregister","UnregisterHid","aoaHidSendInputReport","event","SendHidEvent","AoaHidDevice","register","sendInputReport","unregister","aoaGetProtocol","controlTransferIn","GetProtocol","version","getUint16","aoaStartAccessory","Start","HidKeyboard","DESCRIPTOR","modifiers","keys","Set","down","key","ControlLeft","MetaRight","add","up","delete","reset","clear","serializeInputReport","i","HidMouse","descriptor","movementX","movementY","buttons","scrollX","scrollY"],"sourceRoot":""}