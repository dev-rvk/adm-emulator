class SourceProcessor extends AudioWorkletProcessor{#r=[];#e=0;constructor(){super(),this.port.onmessage=r=>{let e=r.data,[o,s]=this.createSource(e);this.#r.push(o),this.#e+=s}}process(r,e){let o=e[0][0],s=e[0][1],t=o.length,c=0,u=this.#e>48e3?1.02:1,n=0;for(;this.#r.length>0&&c<t;){let r=0|n,e=this.#r[0];[e,n,c]=this.copyChunk(n,u,e,o,s,t,c);let l=(0|n)-r;if(this.#e-=l,n-=l,e)return this.#r[0]=e,!0;this.#r.shift()}return c<t&&console.log(`[Audio] Buffer underflow, inserting silence: ${t-c} samples`),!0}}class Int16SourceProcessor extends SourceProcessor{createSource(r){let e=new Int16Array(r[0]);return[e,e.length/2]}copyChunk(r,e,o,s,t,c,u){let n=o.length,l=r<<1;for(;l<n;)if(s[u]=o[l]/32768,t[u]=o[l+1]/32768,r+=e,l=r<<1,(u+=1)===c)return[l<n?o.subarray(l):void 0,r,u];return[void 0,r,u]}}class Float32SourceProcessor extends SourceProcessor{createSource(r){let e=new Float32Array(r[0]);return[e,e.length/2]}copyChunk(r,e,o,s,t,c,u){let n=o.length,l=r<<1;for(;l<n;)if(s[u]=o[l],t[u]=o[l+1],r+=e,l=r<<1,(u+=1)===c)return[l<n?o.subarray(l):void 0,r,u];return[void 0,r,u]}}class Float32PlanerSourceProcessor extends SourceProcessor{createSource(r){let e=r.map(r=>new Float32Array(r));return[e,e[0].length]}copyChunk(r,e,o,s,t,c,u){let n=o[0],l=o[1],a=n.length,i=0|r;for(;i<a;)if(s[u]=n[i],t[u]=l[i],r+=e,i=0|r,(u+=1)===c)return[i<a?o.map(r=>r.subarray(i)):void 0,r,u];return[void 0,r,u]}}registerProcessor("int16-source-processor",Int16SourceProcessor),registerProcessor("float32-source-processor",Float32SourceProcessor),registerProcessor("float32-planer-source-processor",Float32PlanerSourceProcessor);export{};